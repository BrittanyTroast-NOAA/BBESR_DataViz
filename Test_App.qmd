---
title: "Indicator"
format:
  html:
    page-layout: full
    resources: 
      - shinylive-sw.js  # Required to publish the shinylive service worker
    toc: false
filters:
  - shinylive
---



```{shinylive-r}
#| standalone: true
#| viewerHeight: 1000


######START APP######

library(shiny)
library(ggplot2)
library(plotly)
library(gt)
library(tidyr)
library(dplyr)
library(shinyjs)

ui <- fluidPage(
  useShinyjs(),
  #Sidebar
  sidebarLayout(
    sidebarPanel(selectInput("data", label = h2(HTML("<b>Choose Indicator:</b>"), style = "font-size:22px;"),
                             choices = list(
                               'Drivers' = list("Precipitation","Air Temperature"),
                               'Pressures'=list("Oil Spills", "Nuisance Aquatic Vegetation"),
                               'States'=list("Red Drum","Brown Pelican"),
                               'Human Activities'=list("Blue Crab Catch","Oyster Catch", "Seafood Dealers & Vessels Fishing"),
                               'Human Dimensions'=list("Percent Small Business","Unemployment")
                             )),
                 selectInput("data2", label = h2(HTML("<b>Compare Indicator:</b>"), style = "font-size:22px;"),
                             choices = list("",
                               'Drivers' = list("Precipitation","Air Temperature"),
                               'Pressures'=list("Oil Spills", "Nuisance Aquatic Vegetation"),
                               'States'=list("Red Drum","Brown Pelican"),
                               'Human Activities'=list("Blue Crab Catch","Oyster Catch", "Seafood Dealers & Vessels Fishing"),
                               'Human Dimensions'=list("Percent Small Business","Unemployment")
                             )),
                 sliderInput("yearSlider", "Year Range:", min = 1800, max = 2024, value= c(1800, 2024), sep=""),
                 tags$style("#yearSlider .irs-grid-text {font-size: 25px}"),
                 actionButton("goButton", HTML("<b>Go</b>"), style='font-size:150%'),
                 actionButton("reset", HTML("<b>Reset</b>"), style='font-size:150%'),
                 width = 2),
    #Main
    navset_card_tab(
      nav_panel("Graph",
       plotlyOutput("plot", height = '120%')),

      nav_panel("Summary",

               tableOutput("gt_table"),

               htmlOutput("plain_header"),
               htmlOutput("plain_text"),
               tags$style("#plain_text {font-size:20px;margin-bottom: 25px;margin-top: 15px;}"),
               tags$style("#plain_header {font-size:24px;margin-top: 25px;}")),
      
      nav_panel("Compare Indicators",
                uiOutput("message_or_plot")
      )

  
  ) #sidePan
 
 ) #sideLay
 
) #flpage

server <- function(input, output, session) {
  
  ####FUNCTIONS####
  # Plot from RDS object
  plot_fn_obj<-function(df_obj) {
    df_obj$data <- subset(df_obj$data, df_obj$data$year>= isolate(input$yearSlider[1]) & df_obj$data$year<= isolate(input$yearSlider[2]))
    df_obj$pos <- subset(df_obj$pos, df_obj$pos$year>= isolate(input$yearSlider[1]) & df_obj$pos$year<= isolate(input$yearSlider[2]))
    df_obj$neg <- subset(df_obj$neg, df_obj$neg$year>= isolate(input$yearSlider[1]) & df_obj$neg$year<= isolate(input$yearSlider[2]))
    
    
    if (ncol(df_obj$data)<5.5){
      #single plot
      plot_main<-ggplot(data=df_obj$data, aes(x=year, y=value))+
        geom_ribbon(data=df_obj$pos, aes(group=1,ymax=max, ymin=df_obj$vals$mean),fill="#7FFF7F")+
        geom_ribbon(data=df_obj$neg, aes(group=1,ymax=df_obj$vals$mean, ymin=min), fill="#FF7F7F")+
        geom_rect(aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=df_obj$vals$mean-df_obj$vals$sd, ymax=df_obj$vals$mean+df_obj$vals$sd), fill="white")+
        geom_hline(yintercept=df_obj$vals$mean, lty="dashed")+
        geom_hline(yintercept=df_obj$vals$mean+df_obj$vals$sd)+
        geom_hline(yintercept=df_obj$vals$mean-df_obj$vals$sd)+
        geom_line(aes(group=1), lwd=1)+
        labs(x="Year", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+
        theme_bw() + theme(title = element_text(size=14, face = "bold"))
      
      if (max(df_obj$data$year)-min(df_obj$data$year)>20) {
        plot_main<-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))
      } else {
        plot_main<-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))
      }
      plot_main
      
    } else {
      #facet plot
      
      plot_sec<-ggplot(data=df_obj$data, aes(x=year, y=value))+
        facet_wrap(~subnm, ncol=ifelse(length(unique(df_obj$data$subnm))<4,1,2), scales = "free_y")+
        geom_ribbon(data=df_obj$pos, aes(group=subnm,ymax=max, ymin=mean),fill="#7FFF7F")+
        geom_ribbon(data=df_obj$neg, aes(group=subnm,ymax=mean, ymin=min), fill="#FF7F7F")+
        geom_rect(data=merge(df_obj$data,df_obj$vals), aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=mean-sd, ymax=mean+sd), fill="white")+
        geom_hline(aes(yintercept=mean), lty="dashed",data=df_obj$vals)+
        geom_hline(aes(yintercept=mean+sd),data=df_obj$vals)+
        geom_hline(aes(yintercept=mean-sd),data=df_obj$vals)+
        geom_line(aes(group=1), lwd=0.75)+
        labs(x="Year", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+
        theme_bw()+theme(strip.background = element_blank(),
                         strip.text = element_text(face="bold"),
                         title = element_text(size=14, face = "bold"))
      
      if (max(df_obj$data$year)-min(df_obj$data$year)>20) {
        plot_sec<-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))
      } else {
        # plot_sec<-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))
      }
      plot_sec
      
    }
  }
  
  ####GET DATA####
  dat_shrt_nms<-data.frame(c(
    oilsp="Oil Spills",
    nav="Nuisance Aquatic Vegetation",
    rdrum="Red Drum",
    blcrab="Blue Crab Catch",
    brpeli="Brown Pelican",
    oystercat="Oyster Catch",
    persmbusi="Percent Small Business",
    vesfish="Seafood Dealers & Vessels Fishing",
    unemploy="Unemployment",
    precip="Precipitation",
    airtemps="Air Temperature"
  ))
  dat_shrt_nms<-tibble::rownames_to_column(dat_shrt_nms)
  colnames(dat_shrt_nms)<-c("short", "long")
  
  #Data 1
  shrt_nm<-reactive({dat_shrt_nms$short[dat_shrt_nms$long==input$data]})
  data_url <-reactive({paste0("https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/",shrt_nm(),"_li.r")})
  dat_vl<-reactive({source(url(data_url()))})
  dat<-reactive({dat_vl()$value})
  
  #Data 2
  shrt_nm2<-reactive({dat_shrt_nms$short[dat_shrt_nms$long==input$data2]})
  data_url2 <-reactive({paste0("https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/",shrt_nm2(),"_li.r")})
  dat_vl2<-reactive({source(url(data_url2()))})
  dat2<-reactive({dat_vl2()$value})
  
  ####CUSTOM SLIDER####
  observe({
    shinyjs::click("goButton")
  })
  
  observeEvent(input$data, {
    selected_data<- dat()$data
    updateSliderInput(session, "yearSlider",
                      min = min(selected_data$year),
                      max= max(selected_data$year),
                      value=c(min(selected_data$year), max(selected_data$year)), step=1)
  })
  
  observeEvent(input$reset,{
    selected_data<- dat()$data
    updateSliderInput(session,'yearSlider',value = c(min(selected_data$year), max(selected_data$year)))
    
  })
  
  
  
  observeEvent(input$goButton, {
    
    ####MAIN PLOT####
    output$plot<-renderPlotly({
      df_pick <- dat()
      plot_gg<-plot_fn_obj(df_pick)
      plotly_gg<-ggplotly(plot_gg)
      plotly_gg
      
    })
    
    ####OutputSwtich####
    output$message_or_plot<- renderUI({
      
      if(input$data2 == ""){
        return(h2("Please choose a second indicator from the 'Compare Indicator' dropdown"))
      } else {
        plotlyOutput("compare", height = '120%')
      }
      
    })
    
    ####Compare Plot####
    output$compare<-renderPlotly({
      
      dat1_df<-dat()
      dat2_df<-dat2()
      
      df_pick1<-dat1_df$data
      df_pick2<-dat2_df$data
      
      a_dat <- subset(df_pick1, df_pick1$year>= isolate(input$yearSlider[1]) & df_pick1$year<= isolate(input$yearSlider[2]))
      b_dat <- subset(df_pick2, df_pick2$year>= isolate(input$yearSlider[1]) & df_pick2$year<= isolate(input$yearSlider[2]))
      
      a_dat$scaled<-scale(a_dat$value)
      b_dat$scaled<-scale(b_dat$value)
      
      a_dat$indicator<-input$data
      b_dat$indicator<-input$data2
      
      ab_dat<-as.data.frame(rbind(cbind(a_dat$year, a_dat$scaled, a_dat$indicator), cbind(b_dat$year, b_dat$scaled, b_dat$indicator)))
      colnames(ab_dat)<-c("year", "scaled", "indicator")
      ab_dat[,1:2]<-lapply(ab_dat[,1:2], as.numeric)
      
      p<-ggplot(ab_dat, aes(x=year, y=scaled))+
        geom_hline(yintercept = 0, color="gray50", lwd=0.5, lty="dashed")+
        geom_line(aes(color=indicator), lwd=1)+
        scale_color_manual(values = c("blue", "red"))+
        labs(x="Year", y="Scaled Value", color="Selected Indicators")+
        theme_bw() + theme(legend.position = "bottom")
      
      ggplotly(p) %>%
        layout(legend=list(y=1.1,x=0.5, xanchor="center", yanchor="center", orientation="h"))
    })
    
    output$nocompare<-renderText({
      "Please select and indicator to compare from the 'Compare Indicator' dropdown."
    })
    
    ####TABLE#####
    output$gt_table<- render_gt({
      df_pick <- dat()
      df_dat<-df_pick$data
      val_df<-df_pick$vals
      
      sel_dat<-df_dat[df_dat$year>= isolate(input$yearSlider[1]) & df_dat$year<= isolate(input$yearSlider[2]),]
      
      if (nrow(sel_dat)>3) {
        if (ncol(df_dat)<5.5) {
          #Mean Trend
          sel_dat_mean<-mean(sel_dat$value) # mean value last 5 years
          mean_sel<-if_else(sel_dat_mean>val_df$mean+val_df$sd, "+", if_else(sel_dat_mean<val_df$mean-val_df$sd, "-","●")) #qualify mean trend
          
          #Slope Trend
          lmout<-summary(lm(sel_dat$value~sel_dat$year))
          sel_slope<-coef(lmout)[2,1] * length(unique(sel_dat$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)
          slope_sel<-if_else(sel_slope>val_df$sd, "↑", if_else(sel_slope< c(-val_df$sd), "↓","→"))
          
          ###Table stuff
          new_table<-data.frame(val=c(round(val_df$mean,2), round(val_df$sd,2), val_df$mean_sym, val_df$slope_sym, mean_sel, slope_sel),
                                metric=c("Historical_Mean","Historical_SD","Last 5_Mean", "Last 5_Slope","Selected_Mean", "Selected_Slope"))
          
          new_table <- new_table %>% pivot_wider(names_from = metric, values_from = val)
          
          gt(new_table) %>%
            tab_spanner_delim(delim = "_") %>%
            tab_stubhead(label = "Sub Indicator") %>%
            tab_header(title = "Trends in Mean & Slope") %>%
            tab_options(table.border.top.color = "#3498db",
                        table.border.bottom.color = "#3498db",
                        table.border.left.color = "#3498db",
                        table.border.right.color = "#3498db",
                        table.border.top.width = 5,
                        table.border.bottom.width = 5,
                        table.border.left.width = 5,
                        table.border.right.width = 5,
                        table.border.left.style = "solid",
                        table.border.right.style = "solid",) %>%
            tab_style(style = cell_text(align = "center", size=px(18)),locations = cells_body()) %>%
            tab_style(style = cell_text(align = "center", size=px(20), weight = "bold", color="#2c3e50"),locations = cells_stubhead()) %>%
            tab_style(style = cell_text(align = "center", size=px(18), weight = "bold", color="#2c3e50"),locations = cells_stub()) %>%
            tab_style(style = cell_text(align = "center", size=px(18)),locations = cells_column_labels()) %>%
            tab_style(style = cell_text(align = "center", size=px(20), weight = "bold", color="#2c3e50"),locations = cells_column_spanners()) %>%
            tab_style(style = cell_text(align = "center", size=px(24), color="#3498db", weight = "bold"),locations = cells_title())
        } else {
          #Selected Multi Sub
          
          sub_list<-list()
          subs<-unique(df_dat$subnm)
          for (i in 1:length(subs)){
            sub_df<-sel_dat[sel_dat$subnm==subs[i],]
            vals<-val_df[val_df$subnm==subs[i],]
            sub_dat_mean<-mean(sub_df$value) # mean value last 5 years
            mean_sub<-if_else(sub_dat_mean>vals$mean+vals$sd, "+", if_else(sub_dat_mean<vals$mean-vals$sd, "-","●")) #qualify mean trend
            
            #Slope Trend
            lmout<-summary(lm(sub_df$value~sub_df$year))
            sub_slope<-coef(lmout)[2,1] * length(unique(sub_df$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)
            slope_sub<-if_else(sub_slope>vals$sd, "↑", if_else(sub_slope< c(-vals$sd), "↓","→"))
            
            add_sub<-data.frame(mean_sel=mean_sub,
                                slope_sel=slope_sub)
            sub_list[[i]]<-add_sub
            
          }
          
          add_sel_df<-do.call("rbind",sub_list)
          val_df<-cbind(val_df, add_sel_df)
          
          val_df$mean<-as.character(val_df$mean)
          val_df$sd<-as.character(val_df$sd)
          
          new_table<-val_df %>% select("Sub_Indicator"=subnm,"Historical_Mean"=mean, "Historical_SD"=sd, "Last 5_Mean"=mean_sym, "Last 5_Slope"=slope_sym, "Selected_Mean"=mean_sel, "Selected_Slope"=slope_sel) %>%
            group_by(Sub_Indicator) %>% pivot_longer(cols = -c("Sub_Indicator"))
          
          
          new_table <- new_table %>% pivot_wider(names_from = name, values_from = value)
          new_table[,2:3]<-lapply(new_table[,2:3], function(x) {round(as.numeric(x),2)})
          rownames(new_table)<-new_table$Sub_Indicator
          
          gt(new_table, rowname_col = "Sub_Indicator", groupname_col = NA) %>%
            tab_spanner_delim(delim = "_") %>%
            tab_stubhead(label = "Sub Indicator") %>%
            tab_header(title = "Trends in Mean & Slope") %>%
            tab_options(table.border.top.color = "#3498db",
                        table.border.bottom.color = "#3498db",
                        table.border.left.color = "#3498db",
                        table.border.right.color = "#3498db",
                        table.border.top.width = 5,
                        table.border.bottom.width = 5,
                        table.border.left.width = 5,
                        table.border.right.width = 5,
                        table.border.left.style = "solid",
                        table.border.right.style = "solid",) %>%
            tab_style(style = cell_text(align = "center", size=px(18)),locations = cells_body()) %>%
            tab_style(style = cell_text(align = "center", size=px(20), weight = "bold", color="#2c3e50"),locations = cells_stubhead()) %>%
            tab_style(style = cell_text(align = "center", size=px(18), weight = "bold", color="#2c3e50"),locations = cells_stub()) %>%
            tab_style(style = cell_text(align = "center", size=px(18)),locations = cells_column_labels()) %>%
            tab_style(style = cell_text(align = "center", size=px(20), weight = "bold", color="#2c3e50"),locations = cells_column_spanners()) %>%
            tab_style(style = cell_text(align = "center", size=px(24), color="#3498db", weight = "bold"),locations = cells_title())
        }
        
        
      } else {
        
        ###Table stuff
        if (ncol(df_dat)<5.5) {
          new_table<-data.frame(val=c(round(val_df$mean,2), round(val_df$sd,2), val_df$mean_sym, val_df$slope_sym),
                                metric=c("Historical_Mean","Historical_SD","Last 5_Mean", "Last 5_Slope"))
          
          new_table <- new_table %>% pivot_wider(names_from = metric, values_from = val)
          
          gt(new_table) %>%
            tab_spanner_delim(delim = "_") %>%
            tab_stubhead(label = "Sub Indicator") %>%
            tab_header(title = "Trends in Mean & Slope") %>%
            tab_options(table.border.top.color = "#3498db",
                        table.border.bottom.color = "#3498db",
                        table.border.left.color = "#3498db",
                        table.border.right.color = "#3498db",
                        table.border.top.width = 5,
                        table.border.bottom.width = 5,
                        table.border.left.width = 5,
                        table.border.right.width = 5,
                        table.border.left.style = "solid",
                        table.border.right.style = "solid",) %>%
            tab_style(style = cell_text(align = "center", size=px(18)),locations = cells_body()) %>%
            tab_style(style = cell_text(align = "center", size=px(20), weight = "bold", color="#2c3e50"),locations = cells_stubhead()) %>%
            tab_style(style = cell_text(align = "center", size=px(18), weight = "bold", color="#2c3e50"),locations = cells_stub()) %>%
            tab_style(style = cell_text(align = "center", size=px(18)),locations = cells_column_labels()) %>%
            tab_style(style = cell_text(align = "center", size=px(20), weight = "bold", color="#2c3e50"),locations = cells_column_spanners()) %>%
            tab_style(style = cell_text(align = "center", size=px(24), color="#3498db", weight = "bold"),locations = cells_title())
          
        } else {
          val_df$mean<-as.character(val_df$mean)
          val_df$sd<-as.character(val_df$sd)
          
          new_table<-val_df %>% select("Sub_Indicator"=subnm,"Historical_Mean"=mean, "Historical_SD"=sd, "Last 5_Mean"=mean_sym, "Last 5_Slope"=slope_sym) %>%
            group_by(Sub_Indicator) %>% pivot_longer(cols = -c("Sub_Indicator"))
          
          
          new_table <- new_table %>% pivot_wider(names_from = name, values_from = value)
          new_table[,2:3]<-lapply(new_table[,2:3], function(x) {round(as.numeric(x),2)})
          rownames(new_table)<-new_table$Sub_Indicator
          
          gt(new_table, rowname_col = "Sub_Indicator", groupname_col = NA) %>%
            tab_spanner_delim(delim = "_") %>%
            tab_stubhead(label = "Sub Indicator") %>%
            tab_header(title = "Trends in Mean & Slope") %>%
            tab_options(table.border.top.color = "#3498db",
                        table.border.bottom.color = "#3498db",
                        table.border.left.color = "#3498db",
                        table.border.right.color = "#3498db",
                        table.border.top.width = 5,
                        table.border.bottom.width = 5,
                        table.border.left.width = 5,
                        table.border.right.width = 5,
                        table.border.left.style = "solid",
                        table.border.right.style = "solid",) %>%
            tab_style(style = cell_text(align = "center", size=px(18)),locations = cells_body()) %>%
            tab_style(style = cell_text(align = "center", size=px(20), weight = "bold", color="#2c3e50"),locations = cells_stubhead()) %>%
            tab_style(style = cell_text(align = "center", size=px(18), weight = "bold", color="#2c3e50"),locations = cells_stub()) %>%
            tab_style(style = cell_text(align = "center", size=px(18)),locations = cells_column_labels()) %>%
            tab_style(style = cell_text(align = "center", size=px(20), weight = "bold", color="#2c3e50"),locations = cells_column_spanners()) %>%
            tab_style(style = cell_text(align = "center", size=px(24), color="#3498db", weight = "bold"),locations = cells_title())
          
        }
        
      }
    })
    
    
    #####Plain Text#####
    output$plain_header<- renderText({
      plain_header<-paste0("<b><u>Summary</b></u>")
    })
    
    ####PLAIN TEXT####
    output$plain_text<-renderText({
      df_pick <- dat()
      df_dat<-df_pick$data
      val_df<-df_pick$vals
      df_lab<-df_pick$labs
      sel_dat<-df_dat[df_dat$year>= isolate(input$yearSlider[1]) & df_dat$year<= isolate(input$yearSlider[2]),]
      
      
      if (nrow(sel_dat)<3) {
        ###Not selected no subs
        if (ncol(df_dat)<5.5) {
          text<-paste0("The <b>",df_lab[1,2] ,"</b> indicator has a historical mean of <u><b>", round(val_df$mean[1],2),"</u></b> ±<u><b>",round(val_df$sd[1],2)  ,"</u></b> and trends for the last five years of data show mean values <b><u>",val_df$mean_word, "</b></u> 1 standard deviation from the historical mean and <u><b>",val_df$slope_word, "</u></b> trend in slope.")
        } else {
          ###Not slected subs
          val_df$mean<-as.character(val_df$mean)
          val_df$sd<-as.character(val_df$sd)
          
          new_table<-val_df %>% select(subnm, mean,  sd,  mean_sym,  slope_sym) %>% 
            group_by(subnm) %>% pivot_longer(cols = -c(subnm))
          
          val_df$mean<-as.numeric(val_df$mean)
          val_df$sd<-as.numeric(val_df$sd)
          
          
          text<-paste0("The <b>",df_lab[1,2] ,"</b> indicator for the <u><b>", val_df$subnm[1],"</u></b> sub indicator has a historical mean of <u><b>", round(val_df$mean[1],2),"</u></b> ±<u><b>",round(val_df$sd[1],2)  ,"</u></b> and trends for the last five years of data show mean values <b><u>",val_df$mean_word[1], "</b></u> 1 standard deviation from the historical mean and <u><b>",val_df$slope_word[1], "</u></b> trend in slope.")
          
          text_li<-list()
          for (i in 2:length(val_df$subnm)) {
            subtext<-paste0("The <u><b>",val_df$subnm[i], "</u></b> sub index historical mean is <u><b>",round(val_df$mean[i],2),"</u></b>±<u><b>",round(val_df$sd[i],2),"</u></b> and trends from the last five years of data show mean values<u><b>",val_df$mean_word[i],"</u></b> 1 standard deviation from the historical mean and <u><b>",val_df$slope_word[i], "</u></b> trend in slope.") 
            text_li[[i]]<-subtext
          }
          subs_text<-do.call("paste", text_li)
          paste(text,subs_text)
        }
        
        
      } else {
        if (ncol(df_dat)<5.5) {
          
          #Selected no subs
          #Mean Trend
          sel_dat_mean<-mean(sel_dat$value) # mean value last 5 years
          mean_sel_word<-if_else(sel_dat_mean>val_df$mean+val_df$sd, "greater", if_else(sel_dat_mean<val_df$mean-val_df$sd, "below","within")) #qualify mean trend
          
          #Slope Trend
          lmout<-summary(lm(sel_dat$value~sel_dat$year))
          sel_slope<-coef(lmout)[2,1] * length(unique(sel_dat$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)
          slope_sel_word<-if_else(sel_slope>val_df$sd, "an increasing", if_else(sel_slope< c(-val_df$sd), "a decreasing","a stable"))
          
          range<-range(sel_dat$year)
          
          text<-paste0("The <b>",df_lab[1,2] ,"</b> indicator has a historical mean of <u><b>", round(val_df$mean[1],2),"</u></b> ±<u><b>",round(val_df$sd[1],2)  ,"</u></b> and trends for the last five years of data show mean values <b><u>",val_df$mean_word, "</u></b> 1 standard deviation from the historical mean and <b><u>",val_df$slope_word, "</b></u> trend in slope. The trends in the selected years of data <b>(",range[1],"-",range[2],")</b> show mean values <b><u>", mean_sel_word,"</b></u> 1 standard deviation from the historical mean and <b><u>",slope_sel_word, "</b></u> trend in slope.")
          
          
        } else {
          ###Selected w subs
          sub_list<-list()
          subs<-unique(df_dat$subnm)
          for (i in 1:length(subs)){
            sub_df<-sel_dat[sel_dat$subnm==subs[i],]
            vals<-val_df[val_df$subnm==subs[i],]
            sub_dat_mean<-mean(sub_df$value) # mean value last 5 years
            mean_sub<-if_else(sub_dat_mean>vals$mean+vals$sd, "greater", if_else(sub_dat_mean<vals$mean-vals$sd, "below","within")) #qualify mean trend
            
            #Slope Trend
            lmout<-summary(lm(sub_df$value~sub_df$year))
            sub_slope<-coef(lmout)[2,1] * length(unique(sub_df$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)
            slope_sub<-if_else(sub_slope>vals$sd, "an increasing", if_else(sub_slope< c(-vals$sd), "a decreasing","a stable"))
            
            add_sub<-data.frame(mean_sel=mean_sub,
                                slope_sel=slope_sub)
            sub_list[[i]]<-add_sub
            
          }
          add_sel_df<-do.call("rbind",sub_list)
          val_df<-cbind(val_df, add_sel_df)
          
          val_df$mean<-as.character(val_df$mean)
          val_df$sd<-as.character(val_df$sd)
          
          val_df<-val_df %>% select(subnm,mean, sd, mean_word, slope_word, mean_sel, slope_sel)
          val_df$mean<-as.numeric(val_df$mean)
          val_df$sd<-as.numeric(val_df$sd)
          
          range<-range(sel_dat$year)
          
          text<-paste0("The <b>",df_lab[1,2] ,"</b> indicator for the <u><b>", val_df$subnm[1],"</u></b> sub indicator has a historical mean of <u><b>", round(val_df$mean[1],2),"</u></b> ±<u><b>",round(val_df$sd[1],2)  ,"</u></b> and trends for the last five years of data show mean values <b><u>",val_df$mean_word[1], "</b></u> 1 standard deviation from the historical mean and <u><b>",val_df$slope_word[1], "</u></b> trend in slope. The trends in the selected years of data <b>(",range[1],"-",range[2],")</b> show mean values <b><u>", val_df$mean_sel[1],"</b></u> 1 standard deviation from the historical mean and <b><u>",val_df$slope_sel[1], "</b></u> trend in slope.")
          
          text_li<-list()
          for (i in 2:length(val_df$subnm)) {
            subtext<-paste0("The <u><b>",val_df$subnm[i], "</u></b> sub index historical mean is <u><b>",round(val_df$mean[i],2)," </u></b>±<u><b>",round(val_df$sd[i],2),"</u></b> and trends from the last five years of data show mean values <u><b>",val_df$mean_word[i],"</u></b> 1 standard deviation from the historical mean and <u><b>",val_df$slope_word[i], "</u></b> trend in slope. The trends in the selected years of data show mean values <b><u>", val_df$mean_sel[i],"</b></u> 1 standard deviation from the historical mean and <b><u>",val_df$slope_sel[i], "</b></u> trend in slope.") 
            text_li[[i]]<-subtext
          }
          subs_text<-do.call("paste", text_li)
          paste(text,subs_text)
          
        }
        
        
      }
    })
    
    
    
    
    
    
  })
  
}

shinyApp(ui, server)
```
