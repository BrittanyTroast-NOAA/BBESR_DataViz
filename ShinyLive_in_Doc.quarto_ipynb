{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"ShinyLive in Doc\"\n",
        "format:\n",
        "  html:\n",
        "    page-layout: full\n",
        "    echo: false\n",
        "    toc: false\n",
        "    resources: \n",
        "    - shinylive-sw.js  # Required to publish the shinylive service worker\n",
        "filters:\n",
        "  - shinylive\n",
        "\n",
        "---\n",
        "\n",
        "```{css, echo=F}\n",
        "body {\n",
        "  margin: 0; /* Removes margin around the body */\n",
        "  padding: 0; /* Removes padding around the body */\n",
        "}\n",
        "\n",
        ".main-container {\n",
        "  padding: 0; /* Removes padding inside the main container */\n",
        "  margin: 0; /* Removes margin inside the main container */\n",
        "  width: 100vw; /* Ensures the container spans the full width of the viewport */\n",
        "  max-width: 100%; /* Prevents any default max width */\n",
        "  overflow-x: hidden; /* Prevents horizontal overflow */\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "Is this any faster?\n",
        "\n",
        "```{shinylive-r}\n",
        "#| standalone: true\n",
        "#| viewerHeight: 800\n",
        "#| viewerWidth: 1200\n",
        "\n",
        "\n",
        "######START APP######\n",
        "\n",
        "library(shiny)\n",
        "library(ggplot2)\n",
        "library(plotly)\n",
        "library(gt)\n",
        "library(tidyr)\n",
        "library(dplyr)\n",
        "library(shinyjs)\n",
        "library(bslib)\n",
        "\n",
        "ui <- fluidPage(\n",
        "  useShinyjs(),\n",
        "  #Sidebar\n",
        "  sidebarLayout(\n",
        "    sidebarPanel(selectInput(\"data\", label = h2(HTML(\"<b>Choose Indicator:</b>\"), style = \"font-size:22px;\"),\n",
        "                             choices = list(\n",
        "                               'Drivers' = list(\"Precipitation\",\"Air Temperature\"),\n",
        "                               'Pressures'=list(\"Oil Spills\", \"Nuisance Aquatic Vegetation\"),\n",
        "                               'States'=list(\"Red Drum\",\"Brown Pelican\"),\n",
        "                               'Human Activities'=list(\"Blue Crab Catch\",\"Oyster Catch\", \"Seafood Dealers & Vessels Fishing\"),\n",
        "                               'Human Dimensions'=list(\"Percent Small Business\",\"Unemployment\")\n",
        "                             )),\n",
        "                 selectInput(\"data2\", label = h2(HTML(\"<b>Compare Indicator:</b>\"), style = \"font-size:22px;\"),\n",
        "                             choices = list(\"\",\n",
        "                                            'Drivers' = list(\"Precipitation\",\"Air Temperature\"),\n",
        "                                            'Pressures'=list(\"Oil Spills\", \"Nuisance Aquatic Vegetation\"),\n",
        "                                            'States'=list(\"Red Drum\",\"Brown Pelican\"),\n",
        "                                            'Human Activities'=list(\"Blue Crab Catch\",\"Oyster Catch\", \"Seafood Dealers & Vessels Fishing\"),\n",
        "                                            'Human Dimensions'=list(\"Percent Small Business\",\"Unemployment\")\n",
        "                             )),\n",
        "                 sliderInput(\"yearSlider\", \"Year Range:\", min = 1800, max = 2024, value= c(1800, 2024), sep=\"\"),\n",
        "                 tags$style(\"#yearSlider .irs-grid-text {font-size: 25px}\"),\n",
        "                 actionButton(\"goButton\", HTML(\"<b>Go</b>\"), style='font-size:150%'),\n",
        "                 actionButton(\"reset\", HTML(\"<b>Reset</b>\"), style='font-size:150%'),\n",
        "                 width = 2),\n",
        "    #Main\n",
        "    mainPanel(\n",
        "                uiOutput(\"message_or_plot\")\n",
        "      \n",
        "      \n",
        "    ) #sidePan\n",
        "    \n",
        "  ) #sideLay\n",
        "  \n",
        ") #flpage\n",
        "\n",
        "server <- function(input, output, session) {\n",
        "  \n",
        "  ####FUNCTIONS####\n",
        "  # Plot from RDS object\n",
        "  plot_fn_obj<-function(df_obj) {\n",
        "    df_obj$data <- subset(df_obj$data, df_obj$data$year>= isolate(input$yearSlider[1]) & df_obj$data$year<= isolate(input$yearSlider[2]))\n",
        "    df_obj$pos <- subset(df_obj$pos, df_obj$pos$year>= isolate(input$yearSlider[1]) & df_obj$pos$year<= isolate(input$yearSlider[2]))\n",
        "    df_obj$neg <- subset(df_obj$neg, df_obj$neg$year>= isolate(input$yearSlider[1]) & df_obj$neg$year<= isolate(input$yearSlider[2]))\n",
        "    \n",
        "    \n",
        "    if (ncol(df_obj$data)<5.5){\n",
        "      #single plot\n",
        "      plot_main<-ggplot(data=df_obj$data, aes(x=year, y=value))+\n",
        "        geom_ribbon(data=df_obj$pos, aes(group=1,ymax=max, ymin=df_obj$vals$mean),fill=\"#7FFF7F\")+\n",
        "        geom_ribbon(data=df_obj$neg, aes(group=1,ymax=df_obj$vals$mean, ymin=min), fill=\"#FF7F7F\")+\n",
        "        geom_rect(aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=df_obj$vals$mean-df_obj$vals$sd, ymax=df_obj$vals$mean+df_obj$vals$sd), fill=\"white\")+\n",
        "        geom_hline(yintercept=df_obj$vals$mean, lty=\"dashed\")+\n",
        "        geom_hline(yintercept=df_obj$vals$mean+df_obj$vals$sd)+\n",
        "        geom_hline(yintercept=df_obj$vals$mean-df_obj$vals$sd)+\n",
        "        geom_line(aes(group=1), lwd=1)+\n",
        "        labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n",
        "        theme_bw() + theme(title = element_text(size=14, face = \"bold\"))\n",
        "      \n",
        "      if (max(df_obj$data$year)-min(df_obj$data$year)>20) {\n",
        "        plot_main<-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n",
        "      } else {\n",
        "        plot_main<-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n",
        "      }\n",
        "      plot_main\n",
        "      \n",
        "    } else {\n",
        "      #facet plot\n",
        "      \n",
        "      plot_sec<-ggplot(data=df_obj$data, aes(x=year, y=value))+\n",
        "        facet_wrap(~subnm, ncol=ifelse(length(unique(df_obj$data$subnm))<4,1,2), scales = \"free_y\")+\n",
        "        geom_ribbon(data=df_obj$pos, aes(group=subnm,ymax=max, ymin=mean),fill=\"#7FFF7F\")+\n",
        "        geom_ribbon(data=df_obj$neg, aes(group=subnm,ymax=mean, ymin=min), fill=\"#FF7F7F\")+\n",
        "        geom_rect(data=merge(df_obj$data,df_obj$vals), aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=mean-sd, ymax=mean+sd), fill=\"white\")+\n",
        "        geom_hline(aes(yintercept=mean), lty=\"dashed\",data=df_obj$vals)+\n",
        "        geom_hline(aes(yintercept=mean+sd),data=df_obj$vals)+\n",
        "        geom_hline(aes(yintercept=mean-sd),data=df_obj$vals)+\n",
        "        geom_line(aes(group=1), lwd=0.75)+\n",
        "        labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n",
        "        theme_bw()+theme(strip.background = element_blank(),\n",
        "                         strip.text = element_text(face=\"bold\"),\n",
        "                         title = element_text(size=14, face = \"bold\"))\n",
        "      \n",
        "      if (max(df_obj$data$year)-min(df_obj$data$year)>20) {\n",
        "        plot_sec<-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n",
        "      } else {\n",
        "        # plot_sec<-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n",
        "      }\n",
        "      plot_sec\n",
        "      \n",
        "    }\n",
        "  }\n",
        "  \n",
        "  ####GET DATA####\n",
        "  dat_shrt_nms<-data.frame(c(\n",
        "    oilsp=\"Oil Spills\",\n",
        "    nav=\"Nuisance Aquatic Vegetation\",\n",
        "    rdrum=\"Red Drum\",\n",
        "    blcrab=\"Blue Crab Catch\",\n",
        "    brpeli=\"Brown Pelican\",\n",
        "    oystercat=\"Oyster Catch\",\n",
        "    persmbusi=\"Percent Small Business\",\n",
        "    vesfish=\"Seafood Dealers & Vessels Fishing\",\n",
        "    unemploy=\"Unemployment\",\n",
        "    precip=\"Precipitation\",\n",
        "    airtemps=\"Air Temperature\"\n",
        "  ))\n",
        "  dat_shrt_nms<-tibble::rownames_to_column(dat_shrt_nms)\n",
        "  colnames(dat_shrt_nms)<-c(\"short\", \"long\")\n",
        "  \n",
        "  #Data 1\n",
        "  shrt_nm<-reactive({dat_shrt_nms$short[dat_shrt_nms$long==input$data]})\n",
        "  data_url <-reactive({paste0(\"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/\",shrt_nm(),\"_li.r\")})\n",
        "  dat_vl<-reactive({source(url(data_url()))})\n",
        "  dat<-reactive({dat_vl()$value})\n",
        "  \n",
        "  #Data 2\n",
        "  shrt_nm2<-reactive({dat_shrt_nms$short[dat_shrt_nms$long==input$data2]})\n",
        "  data_url2 <-reactive({paste0(\"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/\",shrt_nm2(),\"_li.r\")})\n",
        "  dat_vl2<-reactive({source(url(data_url2()))})\n",
        "  dat2<-reactive({dat_vl2()$value})\n",
        "  \n",
        "  ####CUSTOM SLIDER####\n",
        "  observe({\n",
        "    shinyjs::click(\"goButton\")\n",
        "  })\n",
        "  \n",
        "  observeEvent(input$data, {\n",
        "    selected_data<- dat()$data\n",
        "    updateSliderInput(session, \"yearSlider\",\n",
        "                      min = min(selected_data$year),\n",
        "                      max= max(selected_data$year),\n",
        "                      value=c(min(selected_data$year), max(selected_data$year)), step=1)\n",
        "  })\n",
        "  \n",
        "  observeEvent(input$reset,{\n",
        "    selected_data<- dat()$data\n",
        "    updateSliderInput(session,'yearSlider',value = c(min(selected_data$year), max(selected_data$year)))\n",
        "    \n",
        "  })\n",
        "  \n",
        "  \n",
        "  \n",
        "  observeEvent(input$goButton, {\n",
        "    \n",
        "    ####MAIN PLOT####\n",
        "    output$plot<-renderPlotly({\n",
        "      df_pick <- dat()\n",
        "      plot_gg<-plot_fn_obj(df_pick)\n",
        "      plotly_gg<-ggplotly(plot_gg)\n",
        "      plotly_gg\n",
        "      \n",
        "    })\n",
        "    \n",
        "    ####OutputSwtich####\n",
        "    output$message_or_plot<- renderUI({\n",
        "      \n",
        "      if(input$data2 == \"\"){\n",
        "        return(h2(\"Please choose a second indicator from the 'Compare Indicator' dropdown\"))\n",
        "      } else {\n",
        "        plotlyOutput(\"compare\", height = '120%')\n",
        "      }\n",
        "      \n",
        "    })\n",
        "    \n",
        "    ####Compare Plot####\n",
        "    output$compare<-renderPlotly({\n",
        "      \n",
        "      dat1_df<-dat()\n",
        "      dat2_df<-dat2()\n",
        "      \n",
        "      df_pick1<-dat1_df$data\n",
        "      df_pick2<-dat2_df$data\n",
        "      \n",
        "      a_dat <- subset(df_pick1, df_pick1$year>= isolate(input$yearSlider[1]) & df_pick1$year<= isolate(input$yearSlider[2]))\n",
        "      b_dat <- subset(df_pick2, df_pick2$year>= isolate(input$yearSlider[1]) & df_pick2$year<= isolate(input$yearSlider[2]))\n",
        "      \n",
        "      a_dat$scaled<-scale(a_dat$value)\n",
        "      b_dat$scaled<-scale(b_dat$value)\n",
        "      \n",
        "      a_dat$indicator<-input$data\n",
        "      b_dat$indicator<-input$data2\n",
        "      \n",
        "      ab_dat<-as.data.frame(rbind(cbind(a_dat$year, a_dat$scaled, a_dat$indicator), cbind(b_dat$year, b_dat$scaled, b_dat$indicator)))\n",
        "      colnames(ab_dat)<-c(\"year\", \"scaled\", \"indicator\")\n",
        "      ab_dat[,1:2]<-lapply(ab_dat[,1:2], as.numeric)\n",
        "      \n",
        "      p<-ggplot(ab_dat, aes(x=year, y=scaled))+\n",
        "        geom_hline(yintercept = 0, color=\"gray50\", lwd=0.5, lty=\"dashed\")+\n",
        "        geom_line(aes(color=indicator), lwd=1)+\n",
        "        scale_color_manual(values = c(\"blue\", \"red\"))+\n",
        "        labs(x=\"Year\", y=\"Scaled Value\", color=\"Selected Indicators\")+\n",
        "        theme_bw() + theme(legend.position = \"bottom\")\n",
        "      \n",
        "      ggplotly(p) %>%\n",
        "        layout(legend=list(y=1.1,x=0.5, xanchor=\"center\", yanchor=\"center\", orientation=\"h\"))\n",
        "    })\n",
        "    \n",
        "    output$nocompare<-renderText({\n",
        "      \"Please select and indicator to compare from the 'Compare Indicator' dropdown.\"\n",
        "    })\n",
        "    \n",
        "\n",
        "    \n",
        "  })\n",
        "  \n",
        "}\n",
        "\n",
        "shinyApp(ui, server)\n",
        "\n",
        "```"
      ],
      "id": "4c4e41ba"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}