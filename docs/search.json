[
  {
    "objectID": "Test_App.html",
    "href": "Test_App.html",
    "title": "Test_App",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(gt)\nlibrary(tidyr)\nlibrary(dplyr)\n\nui &lt;- fluidPage(\n  selectInput(\"data\", label = h2(\"Choose Indicator:\", style = \"font-size:20px;\"),\n              choices = c(\"Oil Spills\",\n                          \"Nuisance Aquatic Vegetation\",\n                          \"Red Drum\",\n                          \"Blue Crab Catch\",\n                          \"Brown Pelican\",\n                          \"Oyster Catch\",\n                          \"Percent Small Business\",\n                          \"Vessels Fishing & Seafood Dealers\")),\n  sliderInput(\"yearSlider\", \"Year Range:\", min = 1971, max = 2022, value= c(1971, 2022)),\n  actionButton(\"goButton\", \"Go\"),\n  actionButton(\"reset\", \"Reset\"),\n  plotlyOutput(\"plot\"),\n  tableOutput(\"gt_table\")\n)\n\nserver &lt;- function(input, output, session) {\n  \n  ###FUNCTIONS####\n  # Plot from RDS object\n  plot_fn_obj&lt;-function(df_obj) {\n    df_obj$data &lt;- subset(df_obj$data, df_obj$data$year&gt;= isolate(input$yearSlider[1]) & df_obj$data$year&lt;= isolate(input$yearSlider[2]))\n    df_obj$pos &lt;- subset(df_obj$pos, df_obj$pos$year&gt;= isolate(input$yearSlider[1]) & df_obj$pos$year&lt;= isolate(input$yearSlider[2]))\n    df_obj$neg &lt;- subset(df_obj$neg, df_obj$neg$year&gt;= isolate(input$yearSlider[1]) & df_obj$neg$year&lt;= isolate(input$yearSlider[2]))\n\n\n    if (ncol(df_obj$data)&lt;5.5){\n      #single plot\n      plot_main&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n        geom_ribbon(data=df_obj$pos, aes(group=1,ymax=max, ymin=df_obj$vals$mean),fill=\"#7FFF7F\")+\n        geom_ribbon(data=df_obj$neg, aes(group=1,ymax=df_obj$vals$mean, ymin=min), fill=\"#FF7F7F\")+\n        geom_rect(aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=df_obj$vals$mean-df_obj$vals$sd, ymax=df_obj$vals$mean+df_obj$vals$sd), fill=\"white\")+\n        geom_hline(yintercept=df_obj$vals$mean, lty=\"dashed\")+\n        geom_hline(yintercept=df_obj$vals$mean+df_obj$vals$sd)+\n        geom_hline(yintercept=df_obj$vals$mean-df_obj$vals$sd)+\n        geom_line(aes(group=1), lwd=1)+\n        labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n        theme_bw() + theme(title = element_text(size=14, face = \"bold\"))\n\n      if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n        plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n      } else {\n        plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n      }\n      plot_main\n\n    } else {\n      #facet plot\n\n      plot_sec&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n        facet_wrap(~subnm, ncol=1, scales = \"free_y\")+\n        geom_ribbon(data=df_obj$pos, aes(group=subnm,ymax=max, ymin=mean),fill=\"#7FFF7F\")+\n        geom_ribbon(data=df_obj$neg, aes(group=subnm,ymax=mean, ymin=min), fill=\"#FF7F7F\")+\n        geom_rect(data=merge(df_obj$data,df_obj$vals), aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=mean-sd, ymax=mean+sd), fill=\"white\")+\n        geom_hline(aes(yintercept=mean), lty=\"dashed\",data=df_obj$vals)+\n        geom_hline(aes(yintercept=mean+sd),data=df_obj$vals)+\n        geom_hline(aes(yintercept=mean-sd),data=df_obj$vals)+\n        geom_line(aes(group=1), lwd=0.75)+\n        labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n        theme_bw()+theme(strip.background = element_blank(),\n                         strip.text = element_text(face=\"bold\"),\n                         title = element_text(size=14, face = \"bold\"))\n\n      if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n        plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n      } else {\n        # plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n      }\n      plot_sec\n\n    }\n  }\n\n  ####GET DATA####\n  dat_shrt_nms&lt;-data.frame(c(\n    oilsp=\"Oil Spills\",\n    nav=\"Nuisance Aquatic Vegetation\",\n    rdrum=\"Red Drum\",\n    blcrab=\"Blue Crab Catch\",\n    brpeli=\"Brown Pelican\",\n    oystercat=\"Oyster Catch\",\n    persmbusi=\"Percent Small Business\",\n    vesfish=\"Vessels Fishing & Seafood Dealers\"\n  ))\n  dat_shrt_nms&lt;-tibble::rownames_to_column(dat_shrt_nms)\n  colnames(dat_shrt_nms)&lt;-c(\"short\", \"long\")\n  \n  shrt_nm&lt;-reactive({dat_shrt_nms$short[dat_shrt_nms$long==input$data]})\n  data_url &lt;-reactive({paste0(\"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/\",shrt_nm(),\"_li.r\")})\n  dat_vl&lt;-reactive({source(url(data_url()))})\n  dat&lt;-reactive({dat_vl()$value})\n\n  \n  ####CUSTOM SLIDER####\n  observeEvent(input$data, {\n    selected_data&lt;- dat()$data\n    updateSliderInput(session, \"yearSlider\",\n                      min = min(selected_data$year),\n                      max= max(selected_data$year),\n                      value=c(min(selected_data$year), max(selected_data$year)))\n  })\n  \n  observeEvent(input$reset,{\n    selected_data&lt;- dat()$data\n    updateSliderInput(session,'yearSlider',value = c(min(selected_data$year), max(selected_data$year)))\n\n  })\n\n  \n  \n  observeEvent(input$goButton, {\n    \n    ####MAIN PLOT####\n    output$plot&lt;-renderPlotly({\n      df_pick &lt;- dat()\n      plot_gg&lt;-plot_fn_obj(df_pick)\n      plotly_gg&lt;-ggplotly(plot_gg)\n      plotly_gg\n      \n    })\n    \n    ####Table#####\n    output$gt_table&lt;- render_gt({\n      df_pick &lt;- dat()\n      df_dat&lt;-df_pick$data\n      val_df&lt;-df_pick$vals\n      \n      sel_dat&lt;-df_dat[df_dat$year&gt;= isolate(input$yearSlider[1]) & df_dat$year&lt;= isolate(input$yearSlider[2]),]\n      \n      if (nrow(sel_dat)&gt;3) {\n        if (ncol(df_dat)&lt;5.5) {\n          #Mean Trend\n          sel_dat_mean&lt;-mean(sel_dat$value) # mean value last 5 years\n          mean_sel&lt;-if_else(sel_dat_mean&gt;val_df$mean+val_df$sd, \"+\", if_else(sel_dat_mean&lt;val_df$mean-val_df$sd, \"-\",\"●\")) #qualify mean trend\n          \n          #Slope Trend\n          lmout&lt;-summary(lm(sel_dat$value~sel_dat$year))\n          sel_slope&lt;-coef(lmout)[2,1] * length(unique(sel_dat$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n          slope_sel&lt;-if_else(sel_slope&gt;val_df$sd, \"↑\", if_else(sel_slope&lt; c(-val_df$sd), \"↓\",\"→\"))\n          \n          ###Table stuff\n          new_table&lt;-data.frame(val=c(round(val_df$mean,2), round(val_df$sd,2), val_df$mean_sym, val_df$slope_sym, mean_sel, slope_sel),\n                                metric=c(\"Historical_Mean\",\"Historical_SD\",\"Last 5_Mean\", \"Last 5_Slope\",\"Selected_Mean\", \"Selected_Slope\"))\n          \n          new_table &lt;- new_table %&gt;% pivot_wider(names_from = metric, values_from = val)\n          \n          gt(new_table) %&gt;%\n            tab_spanner_delim(delim = \"_\") %&gt;%\n            tab_stubhead(label = \"Sub Indicator\") %&gt;%\n            tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n            tab_options(table.border.top.color = \"#3498db\",\n                        table.border.bottom.color = \"#3498db\",\n                        table.border.left.color = \"#3498db\",\n                        table.border.right.color = \"#3498db\",\n                        table.border.top.width = 5,\n                        table.border.bottom.width = 5,\n                        table.border.left.width = 5,\n                        table.border.right.width = 5,\n                        table.border.left.style = \"solid\",\n                        table.border.right.style = \"solid\",) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n        } else {\n          #Selected Multi Sub\n          \n          sub_list&lt;-list()\n          subs&lt;-unique(df_dat$subnm)\n          for (i in 1:length(subs)){\n            sub_df&lt;-sel_dat[sel_dat$subnm==subs[i],]\n            vals&lt;-val_df[val_df$subnm==subs[i],]\n            sub_dat_mean&lt;-mean(sub_df$value) # mean value last 5 years\n            mean_sub&lt;-if_else(sub_dat_mean&gt;vals$mean+vals$sd, \"+\", if_else(sub_dat_mean&lt;vals$mean-vals$sd, \"-\",\"●\")) #qualify mean trend\n            \n            #Slope Trend\n            lmout&lt;-summary(lm(sub_df$value~sub_df$year))\n            sub_slope&lt;-coef(lmout)[2,1] * length(unique(sub_df$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n            slope_sub&lt;-if_else(sub_slope&gt;vals$sd, \"↑\", if_else(sub_slope&lt; c(-vals$sd), \"↓\",\"→\"))\n            \n            add_sub&lt;-data.frame(mean_sel=mean_sub,\n                                slope_sel=slope_sub)\n            sub_list[[i]]&lt;-add_sub\n            \n          }\n          \n          add_sel_df&lt;-do.call(\"rbind\",sub_list)\n          val_df&lt;-cbind(val_df, add_sel_df)\n          \n          val_df$mean&lt;-as.character(val_df$mean)\n          val_df$sd&lt;-as.character(val_df$sd)\n          \n          new_table&lt;-val_df %&gt;% select(\"Sub_Indicator\"=subnm,\"Historical_Mean\"=mean, \"Historical_SD\"=sd, \"Last 5_Mean\"=mean_sym, \"Last 5_Slope\"=slope_sym, \"Selected_Mean\"=mean_sel, \"Selected_Slope\"=slope_sel) %&gt;%\n            group_by(Sub_Indicator) %&gt;% pivot_longer(cols = -c(\"Sub_Indicator\"))\n          \n          \n          new_table &lt;- new_table %&gt;% pivot_wider(names_from = name, values_from = value)\n          new_table[,2:3]&lt;-lapply(new_table[,2:3], function(x) {round(as.numeric(x),2)})\n          rownames(new_table)&lt;-new_table$Sub_Indicator\n          \n          gt(new_table, rowname_col = \"Sub_Indicator\", groupname_col = NA) %&gt;%\n            tab_spanner_delim(delim = \"_\") %&gt;%\n            tab_stubhead(label = \"Sub Indicator\") %&gt;%\n            tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n            tab_options(table.border.top.color = \"#3498db\",\n                        table.border.bottom.color = \"#3498db\",\n                        table.border.left.color = \"#3498db\",\n                        table.border.right.color = \"#3498db\",\n                        table.border.top.width = 5,\n                        table.border.bottom.width = 5,\n                        table.border.left.width = 5,\n                        table.border.right.width = 5,\n                        table.border.left.style = \"solid\",\n                        table.border.right.style = \"solid\",) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n        }\n        \n        \n      } else {\n        \n        ###Table stuff\n        if (ncol(df_dat)&lt;5.5) {\n          new_table&lt;-data.frame(val=c(round(val_df$mean,2), round(val_df$sd,2), val_df$mean_sym, val_df$slope_sym),\n                                metric=c(\"Historical_Mean\",\"Historical_SD\",\"Last 5_Mean\", \"Last 5_Slope\"))\n          \n          new_table &lt;- new_table %&gt;% pivot_wider(names_from = metric, values_from = val)\n          \n          gt(new_table) %&gt;%\n            tab_spanner_delim(delim = \"_\") %&gt;%\n            tab_stubhead(label = \"Sub Indicator\") %&gt;%\n            tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n            tab_options(table.border.top.color = \"#3498db\",\n                        table.border.bottom.color = \"#3498db\",\n                        table.border.left.color = \"#3498db\",\n                        table.border.right.color = \"#3498db\",\n                        table.border.top.width = 5,\n                        table.border.bottom.width = 5,\n                        table.border.left.width = 5,\n                        table.border.right.width = 5,\n                        table.border.left.style = \"solid\",\n                        table.border.right.style = \"solid\",) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n          \n        } else {\n          val_df$mean&lt;-as.character(val_df$mean)\n          val_df$sd&lt;-as.character(val_df$sd)\n          \n          new_table&lt;-val_df %&gt;% select(\"Sub_Indicator\"=subnm,\"Historical_Mean\"=mean, \"Historical_SD\"=sd, \"Last 5_Mean\"=mean_sym, \"Last 5_Slope\"=slope_sym) %&gt;%\n            group_by(Sub_Indicator) %&gt;% pivot_longer(cols = -c(\"Sub_Indicator\"))\n          \n          \n          new_table &lt;- new_table %&gt;% pivot_wider(names_from = name, values_from = value)\n          new_table[,2:3]&lt;-lapply(new_table[,2:3], function(x) {round(as.numeric(x),2)})\n          rownames(new_table)&lt;-new_table$Sub_Indicator\n          \n          gt(new_table, rowname_col = \"Sub_Indicator\", groupname_col = NA) %&gt;%\n            tab_spanner_delim(delim = \"_\") %&gt;%\n            tab_stubhead(label = \"Sub Indicator\") %&gt;%\n            tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n            tab_options(table.border.top.color = \"#3498db\",\n                        table.border.bottom.color = \"#3498db\",\n                        table.border.left.color = \"#3498db\",\n                        table.border.right.color = \"#3498db\",\n                        table.border.top.width = 5,\n                        table.border.bottom.width = 5,\n                        table.border.left.width = 5,\n                        table.border.right.width = 5,\n                        table.border.left.style = \"solid\",\n                        table.border.right.style = \"solid\",) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n            tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n          \n        }\n        \n      }\n    })\n    \n    \n    \n    \n  })\n  \n\n\n  # ####Test Plot###\n  output$testplot&lt;-renderPlot({\n    df_pick &lt;-dat()$data\n    df_cond &lt;- subset(df_pick, df_pick$year&gt;= input$yearSlider[1] & df_pick$year&lt;= input$yearSlider[2])\n    ggplot(df_cond, aes(x=year, y=value))+\n      geom_point()\n\n  })\n\n  #####Text Time Selected#####\n  output$time_range&lt;- renderText({\n    df_pick &lt;- dat()\n    selected_data &lt;- event_data(\"plotly_relayout\")\n    df_dat&lt;-df_pick$data\n    sel_dat&lt;-df_dat[df_dat$year&gt;selected_data$xaxis.range[1] & df_dat$year&lt; selected_data$xaxis.range[2],]\n    \n    if (nrow(sel_dat)&gt;0) {\n      range&lt;-range(sel_dat$year)\n      paste0(\"&lt;b&gt;Time Frame=\",range[1],\"-\",range[2],\"&lt;/b&gt;\")\n    } else  {\n      range&lt;-range(df_dat$year)\n      paste0(\"&lt;b&gt;Time Frame=\",range[1],\"-\",range[2],\"&lt;/b&gt;\")\n    }\n    \n    \n  })\n  \n  }\n\nshinyApp(ui, server)",
    "crumbs": [
      "Plot Data"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BB ESR Viz Intro",
    "section": "",
    "text": "Does this work now?\nThings I should put here\n\nGeneral info about the BB ESR\nPictures of front of it\nLink to the ESR\nExecutive Summary?\nTest to see if things change…again",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "Copy_Tut.html",
    "href": "Copy_Tut.html",
    "title": "Copy_Tut",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  h3(\"Data URL\"),\n  verbatimTextOutput(\"urlText\"),\n  h3(\"Working Directory\"),\n  verbatimTextOutput(\"workingDirectory\"),\n  h3(\"File System Information\"),\n  verbatimTextOutput(\"fileSystem\"),\n  h3(\"Downloaded Data by Relative URL\"),\n  verbatimTextOutput(\"retrievedData\")\n)\n\nserver &lt;- function(input, output, session) {\n  \n  data_url &lt;- \"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/brpeli_li.r\"\n  \n  output$urlText &lt;- renderText({\n    data_url\n  })\n  \n  output$fileSystem &lt;- renderPrint({\n    list.files()\n  })\n\n  output$workingDirectory &lt;- renderPrint({\n    getwd()\n  })\n\n  output$retrievedData &lt;- renderPrint({\n    dat&lt;-source(url(data_url))\n    dat$value$data\n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\nScratch Pad\n\n  peli&lt;-\"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/brpeli_li.r\"\n\ntest&lt;-source(url(peli))\n\ntest$value$data\n\n   year value valence      min      max\n4  1971    11     neg   11.000 1072.487\n5  1972    23     neg   23.000 1072.487\n6  1973    42     neg   42.000 1072.487\n7  1974    90     neg   90.000 1072.487\n8  1975    82     neg   82.000 1072.487\n9  1976    49     neg   49.000 1072.487\n10 1977    83     neg   83.000 1072.487\n11 1978   140     neg  140.000 1072.487\n12 1979   179     neg  179.000 1072.487\n13 1980   158     neg  158.000 1072.487\n14 1981   214     neg  214.000 1072.487\n15 1982   237     neg  237.000 1072.487\n16 1983   467     neg  467.000 1072.487\n17 1984   455     neg  455.000 1072.487\n18 1985   427     neg  427.000 1072.487\n19 1986   400     neg  400.000 1072.487\n20 1987   225     neg  225.000 1072.487\n21 1988   500     neg  500.000 1072.487\n22 1989   600     neg  600.000 1072.487\n23 1990   400     neg  400.000 1072.487\n24 1991    NA    &lt;NA&gt;       NA       NA\n25 1992    80     neg   80.000 1072.487\n26 1993   435     neg  435.000 1072.487\n27 1994   375     neg  375.000 1072.487\n28 1995   800     neg  800.000 1072.487\n29 1996   900     neg  900.000 1072.487\n30 1997  1200     pos 1072.487 1200.000\n31 1998  1400     pos 1072.487 1400.000\n32 1999  2150     pos 1072.487 2150.000\n33 2000   850     neg  850.000 1072.487\n34 2001  2250     pos 1072.487 2250.000\n35 2002  2220     pos 1072.487 2220.000\n36 2003  2300     pos 1072.487 2300.000\n37 2004  3000     pos 1072.487 3000.000\n38 2005  2800     pos 1072.487 2800.000\n39 2006  2025     pos 1072.487 2025.000\n40 2007  5075     pos 1072.487 5075.000\n41 2008  3975     pos 1072.487 3975.000\n42 2009  2185     pos 1072.487 2185.000\n43 2010  3025     pos 1072.487 3025.000\n\ntest$data&lt;-test$value$data\n\nnewli&lt;-test$value",
    "crumbs": [
      "Replicate Tutorial"
    ]
  },
  {
    "objectID": "Data_Obj/App_Prep.html",
    "href": "Data_Obj/App_Prep.html",
    "title": "App_Prep",
    "section": "",
    "text": "library(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.2.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(tidyr)\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\nLoad Data\ncrab&lt;-read.csv(\"Data_CSV/bluecrab_cat.csv\", header=F)\npeli&lt;-read.csv(\"Data_CSV/brown_peli.csv\", header=F)\nnav&lt;-read.csv(\"Data_CSV/NAV.csv\", header=F)\noilspill&lt;-read.csv(\"Data_CSV/OilSpills.csv\", header=F)\noyster&lt;-read.csv(\"Data_CSV/oyster_cat.csv\", header=F)\nsml_bus&lt;-read.csv(\"Data_CSV/per_small_busi.csv\", header=F)\nred_drum&lt;-read.csv(\"Data_CSV/Red_Drum.csv\", header=F)\nsst&lt;-read.csv(\"Data_CSV/sst_raw.csv\", header=F)\nves_deal&lt;-read.csv(\"Data_CSV/VesselsFishing_SeafoodDealers.csv\", header=F)"
  },
  {
    "objectID": "Data_Obj/App_Prep.html#reference-stuff",
    "href": "Data_Obj/App_Prep.html#reference-stuff",
    "title": "App_Prep",
    "section": "Reference Stuff",
    "text": "Reference Stuff\nAll Functions for making data\n\n#Data used for everything\ndf_dat_fn&lt;-function(df) {\n  df_dat&lt;-df[4:nrow(df),c(1:ncol(df))] \n  \n  if (ncol(df_dat)&lt;2.5) {\n    colnames(df_dat)&lt;-c(\"year\",\"value\")\n    df_dat$value&lt;- as.numeric(df_dat$value)\n    \n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    df_dat$valence[df_dat$value&gt;=mean]&lt;-\"pos\"\n    df_dat$valence[df_dat$value&lt; mean]&lt;-\"neg\"\n    df_dat$min &lt;- ifelse(df_dat$value &gt;= mean, mean, df_dat$value)\n    df_dat$max &lt;- ifelse(df_dat$value &gt;= mean, df_dat$value, mean)\n    df_dat$year &lt;- as.numeric(df_dat$year)\n    df_dat} else {\n      \n      sub_list&lt;-list() \n      for (i in 2:ncol(df_dat)){\n        sub_df&lt;-df_dat[,c(1,i)]\n        df_lab&lt;-df[1:3,] #For example sake cutting to only col I need\n        ind&lt;-df_lab[3,]\n        colnames(sub_df)&lt;-c(\"year\",\"value\")\n        # sub_df$value&lt;- as.numeric(sub_df$value)\n        sub_df&lt;-as.data.frame(lapply(sub_df, as.numeric))\n        \n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        sub_df$valence[sub_df$value&gt;=mean]&lt;-\"pos\"\n        sub_df$valence[sub_df$value&lt; mean]&lt;-\"neg\"\n        sub_df$min &lt;- ifelse(sub_df$value &gt;= mean, mean, sub_df$value)\n        sub_df$max &lt;- ifelse(sub_df$value &gt;= mean, sub_df$value, mean)\n        sub_df$year &lt;- as.numeric(sub_df$year)\n        sub_df$subnm&lt;-ind[,i]\n        sub_list[[i]]&lt;-sub_df\n        \n      }\n      df_dat&lt;-do.call(\"rbind\",sub_list)\n    }\n  df_dat\n  \n}\n\n#Pos data set used for main plot\npos_fn&lt;-function(df_dat) {\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    pos&lt;-df_dat\n    pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n    pos} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        pos&lt;-sub_df\n        pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n        pos$subnm&lt;-subs[i]\n        pos$mean&lt;-mean\n        pos$sd&lt;-sd\n        sub_list[[i]]&lt;-pos\n      }\n      pos&lt;-do.call(\"rbind\",sub_list)\n      pos\n    }\n}\n\n#Neg data set used for main plot\nneg_fn&lt;-function(df_dat) {\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    neg&lt;-df_dat\n    neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n    neg} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        neg&lt;-sub_df\n        neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n        neg$subnm&lt;-subs[i]\n        neg$mean&lt;-mean\n        neg$sd&lt;-sd\n        sub_list[[i]]&lt;-neg\n      }\n      neg&lt;-do.call(\"rbind\",sub_list)\n      neg\n    }\n}\n\n#Independent values used throughout\nval_fn&lt;-function(df_dat) {\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    #Trend Analysis\n    last5&lt;-df_dat[df_dat$year &gt; max(df_dat$year)-5,]\n    #Mean Trend\n    last5_mean&lt;-mean(last5$value) # mean value last 5 years\n    mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n    mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n    mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n    \n    #Slope Trend\n    lmout&lt;-summary(lm(last5$value~last5$year))\n    last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n    slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n    slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n    slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n    \n    #Dataframe\n    vals&lt;-data.frame(mean=mean,\n                     sd=sd,\n                     mean_tr=mean_tr,\n                     slope_tr=slope_tr,\n                     mean_sym=mean_sym,\n                     slope_sym=slope_sym,\n                     mean_word=mean_word,\n                     slope_word=slope_word)\n    vals} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        minyear&lt;-min(na.omit(sub_df)$year)\n        maxyear&lt;-max(na.omit(sub_df)$year)\n        allminyear&lt;-min(df_dat$year)\n        allmaxyear&lt;-max(df_dat$year)\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        #Trend Analysis\n        last5&lt;-sub_df[sub_df$year &gt; max(sub_df$year)-5,]\n        #Mean Trend\n        last5_mean&lt;-mean(last5$value) # mean value last 5 years\n        mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n        mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n        mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n        \n        #Slope Trend\n        lmout&lt;-summary(lm(last5$value~last5$year))\n        last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n        slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n        slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n        slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n        \n        vals&lt;-data.frame(allminyear=allminyear,\n                         allmaxyear=allmaxyear,\n                         minyear=minyear,\n                         maxyear=maxyear,\n                         mean=mean,\n                         sd=sd,\n                         mean_tr=mean_tr,\n                         slope_tr=slope_tr,\n                         mean_sym=mean_sym,\n                         slope_sym=slope_sym,\n                         mean_word=mean_word,\n                         slope_word=slope_word,\n                         subnm=subs[i])\n        \n        \n        sub_list[[i]]&lt;-vals\n      }\n      vals&lt;-do.call(\"rbind\",sub_list)\n      vals\n    }\n}\n\n#Main Plot\nplot_fn&lt;-function(df_dat, pos, neg, df_lab, val_df) {\n  \n  \n  if (ncol(df_dat)&lt;5.5){\n    #single plot\n    plot_main&lt;-ggplot(data=df_dat, aes(x=year, y=value))+\n      geom_ribbon(data=pos, aes(group=1,ymax=max, ymin=val_df$mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=neg, aes(group=1,ymax=val_df$mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(aes(xmin=min(df_dat$year),xmax=max(df_dat$year),ymin=val_df$mean-val_df$sd, ymax=val_df$mean+val_df$sd), fill=\"white\")+\n      geom_hline(yintercept=val_df$mean, lty=\"dashed\")+\n      geom_hline(yintercept=val_df$mean+val_df$sd)+\n      geom_hline(yintercept=val_df$mean-val_df$sd)+\n      geom_line(aes(group=1), lwd=1)+\n      labs(x=\"Year\", y=df_lab[2,2], title = df_lab[1,2])+\n      theme_bw() + theme(title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_dat$year)-min(df_dat$year)&gt;20) {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_dat$year),max(df_dat$year),5))\n    } else {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_dat$year),max(df_dat$year),2))\n    }\n    plot_main\n    \n  } else {\n    #facet plot\n    \n    plot_sec&lt;-ggplot(data=df_dat, aes(x=year, y=value))+\n      facet_wrap(~subnm, ncol=1, scales = \"free_y\")+\n      geom_ribbon(data=pos, aes(group=subnm,ymax=max, ymin=mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=neg, aes(group=subnm,ymax=mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(data=merge(df_dat,val_df), aes(xmin=allminyear,xmax=allmaxyear,ymin=mean-sd, ymax=mean+sd), fill=\"white\")+\n      geom_hline(aes(yintercept=mean), lty=\"dashed\",data=val_df)+\n      geom_hline(aes(yintercept=mean+sd),data=val_df)+\n      geom_hline(aes(yintercept=mean-sd),data=val_df)+\n      geom_line(aes(group=1), lwd=0.75)+\n      labs(x=\"Year\", y=df_lab[2,2], title = df_lab[1,2])+\n      theme_bw()+theme(strip.background = element_blank(),\n                       strip.text = element_text(face=\"bold\"),\n                       title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_dat$year)-min(df_dat$year)&gt;20) {\n      plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_dat$year),max(df_dat$year),5))\n    } else {\n      # plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_dat$year),max(df_dat$year),2))\n    }\n    plot_sec\n    \n  }\n}\n\nCombined functions into one\n\ndata_prep_fn &lt;-function (df, list_nm) {\n  df_list&lt;-vector(\"list\", 5)\n  names(df_list)&lt;-c(\"data\", \"pos\", \"neg\", \"labs\", \"vals\")\n\n  #Data used for everything\n  df_dat&lt;-df[4:nrow(df),c(1:ncol(df))] \n  \n  if (ncol(df_dat)&lt;2.5) {\n    colnames(df_dat)&lt;-c(\"year\",\"value\")\n    df_dat$value&lt;- as.numeric(df_dat$value)\n    \n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    df_dat$valence[df_dat$value&gt;=mean]&lt;-\"pos\"\n    df_dat$valence[df_dat$value&lt; mean]&lt;-\"neg\"\n    df_dat$min &lt;- ifelse(df_dat$value &gt;= mean, mean, df_dat$value)\n    df_dat$max &lt;- ifelse(df_dat$value &gt;= mean, df_dat$value, mean)\n    df_dat$year &lt;- as.numeric(df_dat$year)\n    df_dat} else {\n      \n      sub_list&lt;-list() \n      for (i in 2:ncol(df_dat)){\n        sub_df&lt;-df_dat[,c(1,i)]\n        df_lab&lt;-df[1:3,] #For example sake cutting to only col I need\n        ind&lt;-df_lab[3,]\n        colnames(sub_df)&lt;-c(\"year\",\"value\")\n        # sub_df$value&lt;- as.numeric(sub_df$value)\n        sub_df&lt;-as.data.frame(lapply(sub_df, as.numeric))\n        \n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        sub_df$valence[sub_df$value&gt;=mean]&lt;-\"pos\"\n        sub_df$valence[sub_df$value&lt; mean]&lt;-\"neg\"\n        sub_df$min &lt;- ifelse(sub_df$value &gt;= mean, mean, sub_df$value)\n        sub_df$max &lt;- ifelse(sub_df$value &gt;= mean, sub_df$value, mean)\n        sub_df$year &lt;- as.numeric(sub_df$year)\n        sub_df$subnm&lt;-ind[,i]\n        sub_list[[i]]&lt;-sub_df\n        \n      }\n      df_dat&lt;-do.call(\"rbind\",sub_list)\n    }\n  df_list$data&lt;-df_dat\n  \n\n#Pos data set used for main plot\n\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    pos&lt;-df_dat\n    pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n    pos} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        pos&lt;-sub_df\n        pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n        pos$subnm&lt;-subs[i]\n        pos$mean&lt;-mean\n        pos$sd&lt;-sd\n        sub_list[[i]]&lt;-pos\n      }\n      pos&lt;-do.call(\"rbind\",sub_list)\n    }\n      df_list$pos&lt;-pos\n\n\n#Neg data set used for main plot\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    neg&lt;-df_dat\n    neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n    neg} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        neg&lt;-sub_df\n        neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n        neg$subnm&lt;-subs[i]\n        neg$mean&lt;-mean\n        neg$sd&lt;-sd\n        sub_list[[i]]&lt;-neg\n      }\n      neg&lt;-do.call(\"rbind\",sub_list)\n    }\n      df_list$neg&lt;-neg\n      \ndf_list$labs&lt;-df[1:3, c(1:ncol(df))]\n\n#Independent values used throughout\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    #Trend Analysis\n    last5&lt;-df_dat[df_dat$year &gt; max(df_dat$year)-5,]\n    #Mean Trend\n    last5_mean&lt;-mean(last5$value) # mean value last 5 years\n    mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n    mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n    mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n    \n    #Slope Trend\n    lmout&lt;-summary(lm(last5$value~last5$year))\n    last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n    slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n    slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n    slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n    \n    #Dataframe\n    vals&lt;-data.frame(mean=mean,\n                     sd=sd,\n                     mean_tr=mean_tr,\n                     slope_tr=slope_tr,\n                     mean_sym=mean_sym,\n                     slope_sym=slope_sym,\n                     mean_word=mean_word,\n                     slope_word=slope_word)\n    vals} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        minyear&lt;-min(na.omit(sub_df)$year)\n        maxyear&lt;-max(na.omit(sub_df)$year)\n        allminyear&lt;-min(df_dat$year)\n        allmaxyear&lt;-max(df_dat$year)\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        #Trend Analysis\n        last5&lt;-sub_df[sub_df$year &gt; max(sub_df$year)-5,]\n        #Mean Trend\n        last5_mean&lt;-mean(last5$value) # mean value last 5 years\n        mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n        mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n        mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n        \n        #Slope Trend\n        lmout&lt;-summary(lm(last5$value~last5$year))\n        last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n        slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n        slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n        slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n        \n        vals&lt;-data.frame(allminyear=allminyear,\n                         allmaxyear=allmaxyear,\n                         minyear=minyear,\n                         maxyear=maxyear,\n                         mean=mean,\n                         sd=sd,\n                         mean_tr=mean_tr,\n                         slope_tr=slope_tr,\n                         mean_sym=mean_sym,\n                         slope_sym=slope_sym,\n                         mean_word=mean_word,\n                         slope_word=slope_word,\n                         subnm=subs[i])\n        \n        \n        sub_list[[i]]&lt;-vals\n      }\n      vals&lt;-do.call(\"rbind\",sub_list)\n\n    }\n  df_list$vals&lt;-vals\n  df_list\n}\n\nTest Functions on Data\n\npeli_df&lt;-df_dat_fn(peli)\npeli_pos&lt;-pos_fn(peli_df)\npeli_neg&lt;-neg_fn(peli_df)\npeli_lab&lt;-peli[1:3, c(1:ncol(peli))] #For example sake cutting to only col I need\npeli_val&lt;-val_fn(peli_df)\n\n\ntest&lt;-plot_fn(peli_df, peli_pos, peli_neg, peli_lab, peli_val)\nggplotly(test)\n\n#Put different parts of the plot data into a list\npeli_list&lt;-list(peli_df, peli_pos, peli_neg, peli_lab, peli_val)\nnames(peli_list)&lt;-c(\"data\", \"pos\", \"neg\", \"labs\", \"vals\")\n\nclass(peli_list)\nsaveRDS(peli_list, \"Peli_Obj.rds\")"
  },
  {
    "objectID": "Data_Obj/App_Prep.html#data-prep",
    "href": "Data_Obj/App_Prep.html#data-prep",
    "title": "App_Prep",
    "section": "Data Prep",
    "text": "Data Prep\n\nMegafunction\n\ndata_prep_fn &lt;-function (df, list_nm) {\n  df_list&lt;-vector(\"list\", 5)\n  names(df_list)&lt;-c(\"data\", \"pos\", \"neg\", \"labs\", \"vals\")\n\n  #Data used for everything\n  df_dat&lt;-df[4:nrow(df),c(1:ncol(df))] \n  \n  if (ncol(df_dat)&lt;2.5) {\n    colnames(df_dat)&lt;-c(\"year\",\"value\")\n    df_dat$value&lt;- as.numeric(df_dat$value)\n    \n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    df_dat$valence[df_dat$value&gt;=mean]&lt;-\"pos\"\n    df_dat$valence[df_dat$value&lt; mean]&lt;-\"neg\"\n    df_dat$min &lt;- ifelse(df_dat$value &gt;= mean, mean, df_dat$value)\n    df_dat$max &lt;- ifelse(df_dat$value &gt;= mean, df_dat$value, mean)\n    df_dat$year &lt;- as.numeric(df_dat$year)\n    df_dat} else {\n      \n      sub_list&lt;-list() \n      for (i in 2:ncol(df_dat)){\n        sub_df&lt;-df_dat[,c(1,i)]\n        df_lab&lt;-df[1:3,] #For example sake cutting to only col I need\n        ind&lt;-df_lab[3,]\n        colnames(sub_df)&lt;-c(\"year\",\"value\")\n        # sub_df$value&lt;- as.numeric(sub_df$value)\n        sub_df&lt;-as.data.frame(lapply(sub_df, as.numeric))\n        \n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        sub_df$valence[sub_df$value&gt;=mean]&lt;-\"pos\"\n        sub_df$valence[sub_df$value&lt; mean]&lt;-\"neg\"\n        sub_df$min &lt;- ifelse(sub_df$value &gt;= mean, mean, sub_df$value)\n        sub_df$max &lt;- ifelse(sub_df$value &gt;= mean, sub_df$value, mean)\n        sub_df$year &lt;- as.numeric(sub_df$year)\n        sub_df$subnm&lt;-ind[,i]\n        sub_list[[i]]&lt;-sub_df\n        \n      }\n      df_dat&lt;-do.call(\"rbind\",sub_list)\n    }\n  df_list$data&lt;-df_dat\n  \n\n#Pos data set used for main plot\n\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    pos&lt;-df_dat\n    pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n    pos} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        pos&lt;-sub_df\n        pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n        pos$subnm&lt;-subs[i]\n        pos$mean&lt;-mean\n        pos$sd&lt;-sd\n        sub_list[[i]]&lt;-pos\n      }\n      pos&lt;-do.call(\"rbind\",sub_list)\n    }\n      df_list$pos&lt;-pos\n\n\n#Neg data set used for main plot\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    neg&lt;-df_dat\n    neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n    neg} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        neg&lt;-sub_df\n        neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n        neg$subnm&lt;-subs[i]\n        neg$mean&lt;-mean\n        neg$sd&lt;-sd\n        sub_list[[i]]&lt;-neg\n      }\n      neg&lt;-do.call(\"rbind\",sub_list)\n    }\n      df_list$neg&lt;-neg\n      \ndf_list$labs&lt;-df[1:3, c(1:ncol(df))]\n\n#Independent values used throughout\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    #Trend Analysis\n    last5&lt;-df_dat[df_dat$year &gt; max(df_dat$year)-5,]\n    #Mean Trend\n    last5_mean&lt;-mean(last5$value) # mean value last 5 years\n    mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n    mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n    mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n    \n    #Slope Trend\n    lmout&lt;-summary(lm(last5$value~last5$year))\n    last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n    slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n    slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n    slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n    \n    #Dataframe\n    vals&lt;-data.frame(mean=mean,\n                     sd=sd,\n                     mean_tr=mean_tr,\n                     slope_tr=slope_tr,\n                     mean_sym=mean_sym,\n                     slope_sym=slope_sym,\n                     mean_word=mean_word,\n                     slope_word=slope_word)\n    vals} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        minyear&lt;-min(na.omit(sub_df)$year)\n        maxyear&lt;-max(na.omit(sub_df)$year)\n        allminyear&lt;-min(df_dat$year)\n        allmaxyear&lt;-max(df_dat$year)\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        #Trend Analysis\n        last5&lt;-sub_df[sub_df$year &gt; max(sub_df$year)-5,]\n        #Mean Trend\n        last5_mean&lt;-mean(last5$value) # mean value last 5 years\n        mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n        mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n        mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n        \n        #Slope Trend\n        lmout&lt;-summary(lm(last5$value~last5$year))\n        last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n        slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n        slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n        slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n        \n        vals&lt;-data.frame(allminyear=allminyear,\n                         allmaxyear=allmaxyear,\n                         minyear=minyear,\n                         maxyear=maxyear,\n                         mean=mean,\n                         sd=sd,\n                         mean_tr=mean_tr,\n                         slope_tr=slope_tr,\n                         mean_sym=mean_sym,\n                         slope_sym=slope_sym,\n                         mean_word=mean_word,\n                         slope_word=slope_word,\n                         subnm=subs[i])\n        \n        \n        sub_list[[i]]&lt;-vals\n      }\n      vals&lt;-do.call(\"rbind\",sub_list)\n\n    }\n  df_list$vals&lt;-vals\n  df_list\n}\n\n\n\nLoad Plot Fn for Objects\n\nplot_fn_obj&lt;-function(df_obj) {\n  \n  \n  if (ncol(df_obj$data)&lt;5.5){\n    #single plot\n    plot_main&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n      geom_ribbon(data=df_obj$pos, aes(group=1,ymax=max, ymin=df_obj$vals$mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=df_obj$neg, aes(group=1,ymax=df_obj$vals$mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=df_obj$vals$mean-df_obj$vals$sd, ymax=df_obj$vals$mean+df_obj$vals$sd), fill=\"white\")+\n      geom_hline(yintercept=df_obj$vals$mean, lty=\"dashed\")+\n      geom_hline(yintercept=df_obj$vals$mean+df_obj$vals$sd)+\n      geom_hline(yintercept=df_obj$vals$mean-df_obj$vals$sd)+\n      geom_line(aes(group=1), lwd=1)+\n      labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n      theme_bw() + theme(title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n    } else {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n    }\n    plot_main\n    \n  } else {\n    #facet plot\n    \n    plot_sec&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n      facet_wrap(~subnm, ncol=1, scales = \"free_y\")+\n      geom_ribbon(data=df_obj$pos, aes(group=subnm,ymax=max, ymin=mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=df_obj$neg, aes(group=subnm,ymax=mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(data=merge(df_obj$data,df_obj$vals), aes(xmin=allminyear,xmax=allmaxyear,ymin=mean-sd, ymax=mean+sd), fill=\"white\")+\n      geom_hline(aes(yintercept=mean), lty=\"dashed\",data=df_obj$vals)+\n      geom_hline(aes(yintercept=mean+sd),data=df_obj$vals)+\n      geom_hline(aes(yintercept=mean-sd),data=df_obj$vals)+\n      geom_line(aes(group=1), lwd=0.75)+\n      labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n      theme_bw()+theme(strip.background = element_blank(),\n                       strip.text = element_text(face=\"bold\"),\n                       title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n      plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n    } else {\n      # plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n    }\n    plot_sec\n    \n  }\n}\n\n\n\nRun on Datasets\n\nEventually add a save.as argument to save as .rds or .r\n\n\nblcrab_li&lt;-data_prep_fn(crab)\nbrpeli_li&lt;-data_prep_fn(peli)\nnav_li&lt;-data_prep_fn(nav)\noilsp_li&lt;-data_prep_fn(oilspill)\noystercat_li&lt;-data_prep_fn(oyster)\npersmbusi_li&lt;-data_prep_fn(sml_bus)\nrdrum_li&lt;-data_prep_fn(red_drum)\nvesfish_li&lt;-data_prep_fn(ves_deal)\n\n#save files as RDS\nsaveRDS(blcrab_li, \"blcrab_li.rds\")\nsaveRDS(brpeli_li, \"brpeli_li.rds\")\nsaveRDS(nav_li, \"nav_li.rds\")\nsaveRDS(oilsp_li, \"oilsp_li.rds\")\nsaveRDS(oystercat_li, \"oystercat_li.rds\")\nsaveRDS(persmbusi_li, \"persmbusi_li.rds\")\nsaveRDS(rdrum_li, \"rdrum_li.rds\")\nsaveRDS(vesfish_li, \"vesfish_li.rds\")\n\n#save files as R\ndput(blcrab_li, \"Data_R/blcrab_li.r\")\ndput(brpeli_li, \"Data_R/brpeli_li.r\")\ndput(nav_li, \"Data_R/nav_li.r\")\ndput(oilsp_li, \"Data_R/oilsp_li.r\")\ndput(oystercat_li, \"Data_R/oystercat_li.r\")\ndput(persmbusi_li, \"Data_R/persmbusi_li.r\")\ndput(rdrum_li, \"Data_R/rdrum_li.r\")\ndput(vesfish_li, \"Data_R/vesfish_li.r\")"
  },
  {
    "objectID": "Scratch_Pad.html",
    "href": "Scratch_Pad.html",
    "title": "Scratch_Pad",
    "section": "",
    "text": "All years min/max\n\ncrab&lt;-readRDS(\"Data_Obj/blcrab_li.rds\")\npeli&lt;-readRDS(\"Data_Obj/brpeli_li.rds\")\nnav&lt;-readRDS(\"Data_Obj/nav_li.rds\")\noilspill&lt;-readRDS(\"Data_Obj/oilsp_li.rds\")\noyster&lt;-readRDS(\"Data_Obj/oystercat_li.rds\")\nsml_bus&lt;-readRDS(\"Data_Obj/persmbusi_li.rds\")\nred_drum&lt;-readRDS(\"Data_Obj/rdrum_li.rds\")\nves_deal&lt;-readRDS(\"Data_Obj/vesfish_li.rds\")\n\n\ndfs&lt;-list(crab, peli, nav, oilspill, oyster, sml_bus, red_drum, ves_deal)\ndfs_nms&lt;-c(\"crab\", \"peli\", \"nav\", \"oilspill\", \"oyster\", \"sml_bus\", \"red_drum\", \"ves_deal\")\ni=1\nminmax_li&lt;-list()\n\nfor (i in 1:length(dfs)) {\n  df_dat&lt;-dfs[[i]]$data\n  minmax&lt;-data.frame(data=dfs_nms[i],min=min(df_dat$year), max=max(df_dat$year))\n  minmax_li[[i]]&lt;-minmax\n}\nfull_minmax&lt;-do.call(\"rbind\", minmax_li)\n\nfinal_minmax&lt;-data.frame(min=min(full_minmax$min), max=max(full_minmax$max))\n\nBetween Years\n\ncrab$vals\n\n  allminyear allmaxyear minyear maxyear     mean       sd mean_tr   slope_tr\n1       2000       2018    2000    2018 6.851676 1.494265  ptPlus arrowRight\n2       2000       2018    2000    2018 3.529636 0.762382 ptSolid arrowRight\n  mean_sym slope_sym mean_word slope_word             subnm\n1        +         →   greater   a stable Blue Crab Revenue\n2        ●         →    within   a stable   Blue Crab Catch"
  }
]