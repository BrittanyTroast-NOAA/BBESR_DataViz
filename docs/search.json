[
  {
    "objectID": "Test_App.html",
    "href": "Test_App.html",
    "title": "Test_App",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(plotly)\n\nui &lt;- fluidPage(\n  selectInput(\"data\", label=\"Choose Data\", choices=c(\"brpeli\", \"blcrab\")),\n  plotlyOutput(\"plot1\"),\n  textOutput(\"testing\")\n)\n\nserver &lt;- function(input, output, session) {\n\n  # test_input&lt;- reactive({input$data})\n  # data_url &lt;- \"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/blcrab_li.r\"\n  data_url &lt;-reactive({paste0(\"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/\",input$data,\"_li.r\")})\n  dat&lt;-reactive({source(url(data_url()))})\n\n  # crab&lt;-\"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/blcrab_li.r\"\n  # peli&lt;-\"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/brpeli_li.r\"\n\noutput$plot1&lt;- renderPlotly({\n  test_dat&lt;-dat()$value$data\n\n  toplot&lt;-ggplot(test_dat, aes(x=year, y=value))+\n    geom_point(color=\"darkturquoise\")\n    ly_plot&lt;-ggplotly(toplot)\n    ly_plot\n\n    })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Plot Data"
    ]
  },
  {
    "objectID": "Data_Obj/App_Prep.html",
    "href": "Data_Obj/App_Prep.html",
    "title": "App_Prep",
    "section": "",
    "text": "library(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.2.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(tidyr)\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\nLoad Data\ncrab&lt;-read.csv(\"Data_CSV/bluecrab_cat.csv\", header=F)\npeli&lt;-read.csv(\"Data_CSV/brown_peli.csv\", header=F)\nnav&lt;-read.csv(\"Data_CSV/NAV.csv\", header=F)\noilspill&lt;-read.csv(\"Data_CSV/OilSpills.csv\", header=F)\noyster&lt;-read.csv(\"Data_CSV/oyster_cat.csv\", header=F)\nsml_bus&lt;-read.csv(\"Data_CSV/per_small_busi.csv\", header=F)\nred_drum&lt;-read.csv(\"Data_CSV/Red_Drum.csv\", header=F)\nsst&lt;-read.csv(\"Data_CSV/sst_raw.csv\", header=F)\nves_deal&lt;-read.csv(\"Data_CSV/VesselsFishing_SeafoodDealers.csv\", header=F)"
  },
  {
    "objectID": "Data_Obj/App_Prep.html#reference-stuff",
    "href": "Data_Obj/App_Prep.html#reference-stuff",
    "title": "App_Prep",
    "section": "Reference Stuff",
    "text": "Reference Stuff\nAll Functions for making data\n\n#Data used for everything\ndf_dat_fn&lt;-function(df) {\n  df_dat&lt;-df[4:nrow(df),c(1:ncol(df))] \n  \n  if (ncol(df_dat)&lt;2.5) {\n    colnames(df_dat)&lt;-c(\"year\",\"value\")\n    df_dat$value&lt;- as.numeric(df_dat$value)\n    \n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    df_dat$valence[df_dat$value&gt;=mean]&lt;-\"pos\"\n    df_dat$valence[df_dat$value&lt; mean]&lt;-\"neg\"\n    df_dat$min &lt;- ifelse(df_dat$value &gt;= mean, mean, df_dat$value)\n    df_dat$max &lt;- ifelse(df_dat$value &gt;= mean, df_dat$value, mean)\n    df_dat$year &lt;- as.numeric(df_dat$year)\n    df_dat} else {\n      \n      sub_list&lt;-list() \n      for (i in 2:ncol(df_dat)){\n        sub_df&lt;-df_dat[,c(1,i)]\n        df_lab&lt;-df[1:3,] #For example sake cutting to only col I need\n        ind&lt;-df_lab[3,]\n        colnames(sub_df)&lt;-c(\"year\",\"value\")\n        # sub_df$value&lt;- as.numeric(sub_df$value)\n        sub_df&lt;-as.data.frame(lapply(sub_df, as.numeric))\n        \n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        sub_df$valence[sub_df$value&gt;=mean]&lt;-\"pos\"\n        sub_df$valence[sub_df$value&lt; mean]&lt;-\"neg\"\n        sub_df$min &lt;- ifelse(sub_df$value &gt;= mean, mean, sub_df$value)\n        sub_df$max &lt;- ifelse(sub_df$value &gt;= mean, sub_df$value, mean)\n        sub_df$year &lt;- as.numeric(sub_df$year)\n        sub_df$subnm&lt;-ind[,i]\n        sub_list[[i]]&lt;-sub_df\n        \n      }\n      df_dat&lt;-do.call(\"rbind\",sub_list)\n    }\n  df_dat\n  \n}\n\n#Pos data set used for main plot\npos_fn&lt;-function(df_dat) {\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    pos&lt;-df_dat\n    pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n    pos} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        pos&lt;-sub_df\n        pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n        pos$subnm&lt;-subs[i]\n        pos$mean&lt;-mean\n        pos$sd&lt;-sd\n        sub_list[[i]]&lt;-pos\n      }\n      pos&lt;-do.call(\"rbind\",sub_list)\n      pos\n    }\n}\n\n#Neg data set used for main plot\nneg_fn&lt;-function(df_dat) {\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    neg&lt;-df_dat\n    neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n    neg} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        neg&lt;-sub_df\n        neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n        neg$subnm&lt;-subs[i]\n        neg$mean&lt;-mean\n        neg$sd&lt;-sd\n        sub_list[[i]]&lt;-neg\n      }\n      neg&lt;-do.call(\"rbind\",sub_list)\n      neg\n    }\n}\n\n#Independent values used throughout\nval_fn&lt;-function(df_dat) {\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    #Trend Analysis\n    last5&lt;-df_dat[df_dat$year &gt; max(df_dat$year)-5,]\n    #Mean Trend\n    last5_mean&lt;-mean(last5$value) # mean value last 5 years\n    mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n    mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n    mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n    \n    #Slope Trend\n    lmout&lt;-summary(lm(last5$value~last5$year))\n    last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n    slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n    slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n    slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n    \n    #Dataframe\n    vals&lt;-data.frame(mean=mean,\n                     sd=sd,\n                     mean_tr=mean_tr,\n                     slope_tr=slope_tr,\n                     mean_sym=mean_sym,\n                     slope_sym=slope_sym,\n                     mean_word=mean_word,\n                     slope_word=slope_word)\n    vals} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        minyear&lt;-min(na.omit(sub_df)$year)\n        maxyear&lt;-max(na.omit(sub_df)$year)\n        allminyear&lt;-min(df_dat$year)\n        allmaxyear&lt;-max(df_dat$year)\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        #Trend Analysis\n        last5&lt;-sub_df[sub_df$year &gt; max(sub_df$year)-5,]\n        #Mean Trend\n        last5_mean&lt;-mean(last5$value) # mean value last 5 years\n        mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n        mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n        mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n        \n        #Slope Trend\n        lmout&lt;-summary(lm(last5$value~last5$year))\n        last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n        slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n        slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n        slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n        \n        vals&lt;-data.frame(allminyear=allminyear,\n                         allmaxyear=allmaxyear,\n                         minyear=minyear,\n                         maxyear=maxyear,\n                         mean=mean,\n                         sd=sd,\n                         mean_tr=mean_tr,\n                         slope_tr=slope_tr,\n                         mean_sym=mean_sym,\n                         slope_sym=slope_sym,\n                         mean_word=mean_word,\n                         slope_word=slope_word,\n                         subnm=subs[i])\n        \n        \n        sub_list[[i]]&lt;-vals\n      }\n      vals&lt;-do.call(\"rbind\",sub_list)\n      vals\n    }\n}\n\n#Main Plot\nplot_fn&lt;-function(df_dat, pos, neg, df_lab, val_df) {\n  \n  \n  if (ncol(df_dat)&lt;5.5){\n    #single plot\n    plot_main&lt;-ggplot(data=df_dat, aes(x=year, y=value))+\n      geom_ribbon(data=pos, aes(group=1,ymax=max, ymin=val_df$mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=neg, aes(group=1,ymax=val_df$mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(aes(xmin=min(df_dat$year),xmax=max(df_dat$year),ymin=val_df$mean-val_df$sd, ymax=val_df$mean+val_df$sd), fill=\"white\")+\n      geom_hline(yintercept=val_df$mean, lty=\"dashed\")+\n      geom_hline(yintercept=val_df$mean+val_df$sd)+\n      geom_hline(yintercept=val_df$mean-val_df$sd)+\n      geom_line(aes(group=1), lwd=1)+\n      labs(x=\"Year\", y=df_lab[2,2], title = df_lab[1,2])+\n      theme_bw() + theme(title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_dat$year)-min(df_dat$year)&gt;20) {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_dat$year),max(df_dat$year),5))\n    } else {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_dat$year),max(df_dat$year),2))\n    }\n    plot_main\n    \n  } else {\n    #facet plot\n    \n    plot_sec&lt;-ggplot(data=df_dat, aes(x=year, y=value))+\n      facet_wrap(~subnm, ncol=1, scales = \"free_y\")+\n      geom_ribbon(data=pos, aes(group=subnm,ymax=max, ymin=mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=neg, aes(group=subnm,ymax=mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(data=merge(df_dat,val_df), aes(xmin=allminyear,xmax=allmaxyear,ymin=mean-sd, ymax=mean+sd), fill=\"white\")+\n      geom_hline(aes(yintercept=mean), lty=\"dashed\",data=val_df)+\n      geom_hline(aes(yintercept=mean+sd),data=val_df)+\n      geom_hline(aes(yintercept=mean-sd),data=val_df)+\n      geom_line(aes(group=1), lwd=0.75)+\n      labs(x=\"Year\", y=df_lab[2,2], title = df_lab[1,2])+\n      theme_bw()+theme(strip.background = element_blank(),\n                       strip.text = element_text(face=\"bold\"),\n                       title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_dat$year)-min(df_dat$year)&gt;20) {\n      plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_dat$year),max(df_dat$year),5))\n    } else {\n      # plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_dat$year),max(df_dat$year),2))\n    }\n    plot_sec\n    \n  }\n}\n\nCombined functions into one\n\ndata_prep_fn &lt;-function (df, list_nm) {\n  df_list&lt;-vector(\"list\", 5)\n  names(df_list)&lt;-c(\"data\", \"pos\", \"neg\", \"labs\", \"vals\")\n\n  #Data used for everything\n  df_dat&lt;-df[4:nrow(df),c(1:ncol(df))] \n  \n  if (ncol(df_dat)&lt;2.5) {\n    colnames(df_dat)&lt;-c(\"year\",\"value\")\n    df_dat$value&lt;- as.numeric(df_dat$value)\n    \n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    df_dat$valence[df_dat$value&gt;=mean]&lt;-\"pos\"\n    df_dat$valence[df_dat$value&lt; mean]&lt;-\"neg\"\n    df_dat$min &lt;- ifelse(df_dat$value &gt;= mean, mean, df_dat$value)\n    df_dat$max &lt;- ifelse(df_dat$value &gt;= mean, df_dat$value, mean)\n    df_dat$year &lt;- as.numeric(df_dat$year)\n    df_dat} else {\n      \n      sub_list&lt;-list() \n      for (i in 2:ncol(df_dat)){\n        sub_df&lt;-df_dat[,c(1,i)]\n        df_lab&lt;-df[1:3,] #For example sake cutting to only col I need\n        ind&lt;-df_lab[3,]\n        colnames(sub_df)&lt;-c(\"year\",\"value\")\n        # sub_df$value&lt;- as.numeric(sub_df$value)\n        sub_df&lt;-as.data.frame(lapply(sub_df, as.numeric))\n        \n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        sub_df$valence[sub_df$value&gt;=mean]&lt;-\"pos\"\n        sub_df$valence[sub_df$value&lt; mean]&lt;-\"neg\"\n        sub_df$min &lt;- ifelse(sub_df$value &gt;= mean, mean, sub_df$value)\n        sub_df$max &lt;- ifelse(sub_df$value &gt;= mean, sub_df$value, mean)\n        sub_df$year &lt;- as.numeric(sub_df$year)\n        sub_df$subnm&lt;-ind[,i]\n        sub_list[[i]]&lt;-sub_df\n        \n      }\n      df_dat&lt;-do.call(\"rbind\",sub_list)\n    }\n  df_list$data&lt;-df_dat\n  \n\n#Pos data set used for main plot\n\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    pos&lt;-df_dat\n    pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n    pos} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        pos&lt;-sub_df\n        pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n        pos$subnm&lt;-subs[i]\n        pos$mean&lt;-mean\n        pos$sd&lt;-sd\n        sub_list[[i]]&lt;-pos\n      }\n      pos&lt;-do.call(\"rbind\",sub_list)\n    }\n      df_list$pos&lt;-pos\n\n\n#Neg data set used for main plot\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    neg&lt;-df_dat\n    neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n    neg} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        neg&lt;-sub_df\n        neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n        neg$subnm&lt;-subs[i]\n        neg$mean&lt;-mean\n        neg$sd&lt;-sd\n        sub_list[[i]]&lt;-neg\n      }\n      neg&lt;-do.call(\"rbind\",sub_list)\n    }\n      df_list$neg&lt;-neg\n      \ndf_list$labs&lt;-df[1:3, c(1:ncol(df))]\n\n#Independent values used throughout\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    #Trend Analysis\n    last5&lt;-df_dat[df_dat$year &gt; max(df_dat$year)-5,]\n    #Mean Trend\n    last5_mean&lt;-mean(last5$value) # mean value last 5 years\n    mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n    mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n    mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n    \n    #Slope Trend\n    lmout&lt;-summary(lm(last5$value~last5$year))\n    last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n    slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n    slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n    slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n    \n    #Dataframe\n    vals&lt;-data.frame(mean=mean,\n                     sd=sd,\n                     mean_tr=mean_tr,\n                     slope_tr=slope_tr,\n                     mean_sym=mean_sym,\n                     slope_sym=slope_sym,\n                     mean_word=mean_word,\n                     slope_word=slope_word)\n    vals} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        minyear&lt;-min(na.omit(sub_df)$year)\n        maxyear&lt;-max(na.omit(sub_df)$year)\n        allminyear&lt;-min(df_dat$year)\n        allmaxyear&lt;-max(df_dat$year)\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        #Trend Analysis\n        last5&lt;-sub_df[sub_df$year &gt; max(sub_df$year)-5,]\n        #Mean Trend\n        last5_mean&lt;-mean(last5$value) # mean value last 5 years\n        mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n        mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n        mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n        \n        #Slope Trend\n        lmout&lt;-summary(lm(last5$value~last5$year))\n        last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n        slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n        slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n        slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n        \n        vals&lt;-data.frame(allminyear=allminyear,\n                         allmaxyear=allmaxyear,\n                         minyear=minyear,\n                         maxyear=maxyear,\n                         mean=mean,\n                         sd=sd,\n                         mean_tr=mean_tr,\n                         slope_tr=slope_tr,\n                         mean_sym=mean_sym,\n                         slope_sym=slope_sym,\n                         mean_word=mean_word,\n                         slope_word=slope_word,\n                         subnm=subs[i])\n        \n        \n        sub_list[[i]]&lt;-vals\n      }\n      vals&lt;-do.call(\"rbind\",sub_list)\n\n    }\n  df_list$vals&lt;-vals\n  df_list\n}\n\nTest Functions on Data\n\npeli_df&lt;-df_dat_fn(peli)\npeli_pos&lt;-pos_fn(peli_df)\npeli_neg&lt;-neg_fn(peli_df)\npeli_lab&lt;-peli[1:3, c(1:ncol(peli))] #For example sake cutting to only col I need\npeli_val&lt;-val_fn(peli_df)\n\n\ntest&lt;-plot_fn(peli_df, peli_pos, peli_neg, peli_lab, peli_val)\nggplotly(test)\n\n#Put different parts of the plot data into a list\npeli_list&lt;-list(peli_df, peli_pos, peli_neg, peli_lab, peli_val)\nnames(peli_list)&lt;-c(\"data\", \"pos\", \"neg\", \"labs\", \"vals\")\n\nclass(peli_list)\nsaveRDS(peli_list, \"Peli_Obj.rds\")"
  },
  {
    "objectID": "Data_Obj/App_Prep.html#data-prep",
    "href": "Data_Obj/App_Prep.html#data-prep",
    "title": "App_Prep",
    "section": "Data Prep",
    "text": "Data Prep\n\nMegafunction\n\ndata_prep_fn &lt;-function (df, list_nm) {\n  df_list&lt;-vector(\"list\", 5)\n  names(df_list)&lt;-c(\"data\", \"pos\", \"neg\", \"labs\", \"vals\")\n\n  #Data used for everything\n  df_dat&lt;-df[4:nrow(df),c(1:ncol(df))] \n  \n  if (ncol(df_dat)&lt;2.5) {\n    colnames(df_dat)&lt;-c(\"year\",\"value\")\n    df_dat$value&lt;- as.numeric(df_dat$value)\n    \n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    df_dat$valence[df_dat$value&gt;=mean]&lt;-\"pos\"\n    df_dat$valence[df_dat$value&lt; mean]&lt;-\"neg\"\n    df_dat$min &lt;- ifelse(df_dat$value &gt;= mean, mean, df_dat$value)\n    df_dat$max &lt;- ifelse(df_dat$value &gt;= mean, df_dat$value, mean)\n    df_dat$year &lt;- as.numeric(df_dat$year)\n    df_dat} else {\n      \n      sub_list&lt;-list() \n      for (i in 2:ncol(df_dat)){\n        sub_df&lt;-df_dat[,c(1,i)]\n        df_lab&lt;-df[1:3,] #For example sake cutting to only col I need\n        ind&lt;-df_lab[3,]\n        colnames(sub_df)&lt;-c(\"year\",\"value\")\n        # sub_df$value&lt;- as.numeric(sub_df$value)\n        sub_df&lt;-as.data.frame(lapply(sub_df, as.numeric))\n        \n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        sub_df$valence[sub_df$value&gt;=mean]&lt;-\"pos\"\n        sub_df$valence[sub_df$value&lt; mean]&lt;-\"neg\"\n        sub_df$min &lt;- ifelse(sub_df$value &gt;= mean, mean, sub_df$value)\n        sub_df$max &lt;- ifelse(sub_df$value &gt;= mean, sub_df$value, mean)\n        sub_df$year &lt;- as.numeric(sub_df$year)\n        sub_df$subnm&lt;-ind[,i]\n        sub_list[[i]]&lt;-sub_df\n        \n      }\n      df_dat&lt;-do.call(\"rbind\",sub_list)\n    }\n  df_list$data&lt;-df_dat\n  \n\n#Pos data set used for main plot\n\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    pos&lt;-df_dat\n    pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n    pos} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        pos&lt;-sub_df\n        pos$value&lt;-ifelse(pos$valence == \"pos\",pos$value, mean)\n        pos$subnm&lt;-subs[i]\n        pos$mean&lt;-mean\n        pos$sd&lt;-sd\n        sub_list[[i]]&lt;-pos\n      }\n      pos&lt;-do.call(\"rbind\",sub_list)\n    }\n      df_list$pos&lt;-pos\n\n\n#Neg data set used for main plot\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    neg&lt;-df_dat\n    neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n    neg} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        neg&lt;-sub_df\n        neg$value&lt;-ifelse(neg$valence == \"neg\",neg$value, mean)\n        neg$subnm&lt;-subs[i]\n        neg$mean&lt;-mean\n        neg$sd&lt;-sd\n        sub_list[[i]]&lt;-neg\n      }\n      neg&lt;-do.call(\"rbind\",sub_list)\n    }\n      df_list$neg&lt;-neg\n      \ndf_list$labs&lt;-df[1:3, c(1:ncol(df))]\n\n#Independent values used throughout\n  if(ncol(df_dat)&lt;6){\n    mean&lt;-mean(as.numeric(df_dat$value), na.rm = T)\n    sd&lt;-sd(as.numeric(df_dat$value), na.rm = T)\n    \n    #Trend Analysis\n    last5&lt;-df_dat[df_dat$year &gt; max(df_dat$year)-5,]\n    #Mean Trend\n    last5_mean&lt;-mean(last5$value) # mean value last 5 years\n    mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n    mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n    mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n    \n    #Slope Trend\n    lmout&lt;-summary(lm(last5$value~last5$year))\n    last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n    slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n    slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n    slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n    \n    #Dataframe\n    vals&lt;-data.frame(mean=mean,\n                     sd=sd,\n                     mean_tr=mean_tr,\n                     slope_tr=slope_tr,\n                     mean_sym=mean_sym,\n                     slope_sym=slope_sym,\n                     mean_word=mean_word,\n                     slope_word=slope_word)\n    vals} else {\n      sub_list&lt;-list()\n      subs&lt;-unique(df_dat$subnm)\n      for (i in 1:length(subs)){\n        sub_df&lt;-df_dat[df_dat$subnm==subs[i],]\n        minyear&lt;-min(na.omit(sub_df)$year)\n        maxyear&lt;-max(na.omit(sub_df)$year)\n        allminyear&lt;-min(df_dat$year)\n        allmaxyear&lt;-max(df_dat$year)\n        mean&lt;-mean(as.numeric(sub_df$value), na.rm = T)\n        sd&lt;-sd(as.numeric(sub_df$value), na.rm = T)\n        \n        #Trend Analysis\n        last5&lt;-sub_df[sub_df$year &gt; max(sub_df$year)-5,]\n        #Mean Trend\n        last5_mean&lt;-mean(last5$value) # mean value last 5 years\n        mean_tr&lt;-if_else(last5_mean&gt;mean+sd, \"ptPlus\", if_else(last5_mean&lt;mean-sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n        mean_sym&lt;-if_else(last5_mean&gt;mean+sd, \"+\", if_else(last5_mean&lt;mean-sd, \"-\",\"●\")) #qualify mean trend\n        mean_word&lt;-if_else(last5_mean&gt;mean+sd, \"greater\", if_else(last5_mean&lt;mean-sd, \"below\",\"within\")) #qualify mean trend\n        \n        #Slope Trend\n        lmout&lt;-summary(lm(last5$value~last5$year))\n        last5_slope&lt;-coef(lmout)[2,1] * 5 #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n        slope_tr&lt;-if_else(last5_slope&gt;sd, \"arrowUp\", if_else(last5_slope&lt; c(-sd), \"arrowDown\",\"arrowRight\"))\n        slope_sym&lt;-if_else(last5_slope&gt;sd, \"↑\", if_else(last5_slope&lt; c(-sd), \"↓\",\"→\"))\n        slope_word&lt;-if_else(last5_slope&gt;sd, \"an increasing\", if_else(last5_slope&lt; c(-sd), \"a decreasing\",\"a stable\"))\n        \n        vals&lt;-data.frame(allminyear=allminyear,\n                         allmaxyear=allmaxyear,\n                         minyear=minyear,\n                         maxyear=maxyear,\n                         mean=mean,\n                         sd=sd,\n                         mean_tr=mean_tr,\n                         slope_tr=slope_tr,\n                         mean_sym=mean_sym,\n                         slope_sym=slope_sym,\n                         mean_word=mean_word,\n                         slope_word=slope_word,\n                         subnm=subs[i])\n        \n        \n        sub_list[[i]]&lt;-vals\n      }\n      vals&lt;-do.call(\"rbind\",sub_list)\n\n    }\n  df_list$vals&lt;-vals\n  df_list\n}\n\n\n\nLoad Plot Fn for Objects\n\nplot_fn_obj&lt;-function(df_obj) {\n  \n  \n  if (ncol(df_obj$data)&lt;5.5){\n    #single plot\n    plot_main&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n      geom_ribbon(data=df_obj$pos, aes(group=1,ymax=max, ymin=df_obj$vals$mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=df_obj$neg, aes(group=1,ymax=df_obj$vals$mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=df_obj$vals$mean-df_obj$vals$sd, ymax=df_obj$vals$mean+df_obj$vals$sd), fill=\"white\")+\n      geom_hline(yintercept=df_obj$vals$mean, lty=\"dashed\")+\n      geom_hline(yintercept=df_obj$vals$mean+df_obj$vals$sd)+\n      geom_hline(yintercept=df_obj$vals$mean-df_obj$vals$sd)+\n      geom_line(aes(group=1), lwd=1)+\n      labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n      theme_bw() + theme(title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n    } else {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n    }\n    plot_main\n    \n  } else {\n    #facet plot\n    \n    plot_sec&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n      facet_wrap(~subnm, ncol=1, scales = \"free_y\")+\n      geom_ribbon(data=df_obj$pos, aes(group=subnm,ymax=max, ymin=mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=df_obj$neg, aes(group=subnm,ymax=mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(data=merge(df_obj$data,df_obj$vals), aes(xmin=allminyear,xmax=allmaxyear,ymin=mean-sd, ymax=mean+sd), fill=\"white\")+\n      geom_hline(aes(yintercept=mean), lty=\"dashed\",data=df_obj$vals)+\n      geom_hline(aes(yintercept=mean+sd),data=df_obj$vals)+\n      geom_hline(aes(yintercept=mean-sd),data=df_obj$vals)+\n      geom_line(aes(group=1), lwd=0.75)+\n      labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n      theme_bw()+theme(strip.background = element_blank(),\n                       strip.text = element_text(face=\"bold\"),\n                       title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n      plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n    } else {\n      # plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n    }\n    plot_sec\n    \n  }\n}\n\n\n\nRun on Datasets\n\nEventually add a save.as argument to save as .rds or .r\n\n\nblcrab_li&lt;-data_prep_fn(crab)\nbrpeli_li&lt;-data_prep_fn(peli)\nnav_li&lt;-data_prep_fn(nav)\noilsp_li&lt;-data_prep_fn(oilspill)\noystercat_li&lt;-data_prep_fn(oyster)\npersmbusi_li&lt;-data_prep_fn(sml_bus)\nrdrum_li&lt;-data_prep_fn(red_drum)\nvesfish_li&lt;-data_prep_fn(ves_deal)\n\n#save files as RDS\nsaveRDS(blcrab_li, \"blcrab_li.rds\")\nsaveRDS(brpeli_li, \"brpeli_li.rds\")\nsaveRDS(nav_li, \"nav_li.rds\")\nsaveRDS(oilsp_li, \"oilsp_li.rds\")\nsaveRDS(oystercat_li, \"oystercat_li.rds\")\nsaveRDS(persmbusi_li, \"persmbusi_li.rds\")\nsaveRDS(rdrum_li, \"rdrum_li.rds\")\nsaveRDS(vesfish_li, \"vesfish_li.rds\")\n\n#save files as R\ndput(blcrab_li, \"Data_R/blcrab_li.r\")\ndput(brpeli_li, \"Data_R/brpeli_li.r\")\ndput(nav_li, \"Data_R/nav_li.r\")\ndput(oilsp_li, \"Data_R/oilsp_li.r\")\ndput(oystercat_li, \"Data_R/oystercat_li.r\")\ndput(persmbusi_li, \"Data_R/persmbusi_li.r\")\ndput(rdrum_li, \"Data_R/rdrum_li.r\")\ndput(vesfish_li, \"Data_R/vesfish_li.r\")"
  },
  {
    "objectID": "Copy_Tut.html",
    "href": "Copy_Tut.html",
    "title": "Copy_Tut",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  h3(\"Data URL\"),\n  verbatimTextOutput(\"urlText\"),\n  h3(\"Working Directory\"),\n  verbatimTextOutput(\"workingDirectory\"),\n  h3(\"File System Information\"),\n  verbatimTextOutput(\"fileSystem\"),\n  h3(\"Downloaded Data by Relative URL\"),\n  verbatimTextOutput(\"retrievedData\")\n)\n\nserver &lt;- function(input, output, session) {\n  \n  data_url &lt;- \"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/brpeli_li.r\"\n  \n  output$urlText &lt;- renderText({\n    data_url\n  })\n  \n  output$fileSystem &lt;- renderPrint({\n    list.files()\n  })\n\n  output$workingDirectory &lt;- renderPrint({\n    getwd()\n  })\n\n  output$retrievedData &lt;- renderPrint({\n    dat&lt;-source(url(data_url))\n    dat$value$data\n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Replicate Tutorial"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BB ESR Viz Intro",
    "section": "",
    "text": "Here is the title page to the repo website.\nThings I should put here\n\nGeneral info about the BB ESR\nPictures of front of it\nLink to the ESR\nExecutive Summary?\nTest to see if things change…again",
    "crumbs": [
      "Home"
    ]
  }
]