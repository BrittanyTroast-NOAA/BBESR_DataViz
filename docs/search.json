[
  {
    "objectID": "Test_App.html",
    "href": "Test_App.html",
    "title": "Indicator",
    "section": "",
    "text": "Random Quart Document\nCould be used for intro.\n\n\nTest how plotly plot works\nHere we can write about an indicator (maybe for key findings and executive summary) and show plot."
  },
  {
    "objectID": "ShinyLive_in_Doc.html",
    "href": "ShinyLive_in_Doc.html",
    "title": "ShinyLive in Doc",
    "section": "",
    "text": "Is this any faster?\n#| standalone: true\n#| viewerHeight: 800\n#| viewerWidth: 1200\n\n\n######START APP######\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(gt)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(shinyjs)\nlibrary(bslib)\n\nui &lt;- fluidPage(\n  useShinyjs(),\n  #Sidebar\n  sidebarLayout(\n    sidebarPanel(selectInput(\"data\", label = h2(HTML(\"&lt;b&gt;Choose Indicator:&lt;/b&gt;\"), style = \"font-size:22px;\"),\n                             choices = list(\n                               'Drivers' = list(\"Precipitation\",\"Air Temperature\"),\n                               'Pressures'=list(\"Oil Spills\", \"Nuisance Aquatic Vegetation\"),\n                               'States'=list(\"Red Drum\",\"Brown Pelican\"),\n                               'Human Activities'=list(\"Blue Crab Catch\",\"Oyster Catch\", \"Seafood Dealers & Vessels Fishing\"),\n                               'Human Dimensions'=list(\"Percent Small Business\",\"Unemployment\")\n                             )),\n                 selectInput(\"data2\", label = h2(HTML(\"&lt;b&gt;Compare Indicator:&lt;/b&gt;\"), style = \"font-size:22px;\"),\n                             choices = list(\"\",\n                                            'Drivers' = list(\"Precipitation\",\"Air Temperature\"),\n                                            'Pressures'=list(\"Oil Spills\", \"Nuisance Aquatic Vegetation\"),\n                                            'States'=list(\"Red Drum\",\"Brown Pelican\"),\n                                            'Human Activities'=list(\"Blue Crab Catch\",\"Oyster Catch\", \"Seafood Dealers & Vessels Fishing\"),\n                                            'Human Dimensions'=list(\"Percent Small Business\",\"Unemployment\")\n                             )),\n                 sliderInput(\"yearSlider\", \"Year Range:\", min = 1800, max = 2024, value= c(1800, 2024), sep=\"\"),\n                 tags$style(\"#yearSlider .irs-grid-text {font-size: 25px}\"),\n                 actionButton(\"goButton\", HTML(\"&lt;b&gt;Go&lt;/b&gt;\"), style='font-size:150%'),\n                 actionButton(\"reset\", HTML(\"&lt;b&gt;Reset&lt;/b&gt;\"), style='font-size:150%'),\n                 width = 2),\n    #Main\n    mainPanel(\n                uiOutput(\"message_or_plot\")\n      \n      \n    ) #sidePan\n    \n  ) #sideLay\n  \n) #flpage\n\nserver &lt;- function(input, output, session) {\n  \n  ####FUNCTIONS####\n  # Plot from RDS object\n  plot_fn_obj&lt;-function(df_obj) {\n    df_obj$data &lt;- subset(df_obj$data, df_obj$data$year&gt;= isolate(input$yearSlider[1]) & df_obj$data$year&lt;= isolate(input$yearSlider[2]))\n    df_obj$pos &lt;- subset(df_obj$pos, df_obj$pos$year&gt;= isolate(input$yearSlider[1]) & df_obj$pos$year&lt;= isolate(input$yearSlider[2]))\n    df_obj$neg &lt;- subset(df_obj$neg, df_obj$neg$year&gt;= isolate(input$yearSlider[1]) & df_obj$neg$year&lt;= isolate(input$yearSlider[2]))\n    \n    \n    if (ncol(df_obj$data)&lt;5.5){\n      #single plot\n      plot_main&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n        geom_ribbon(data=df_obj$pos, aes(group=1,ymax=max, ymin=df_obj$vals$mean),fill=\"#7FFF7F\")+\n        geom_ribbon(data=df_obj$neg, aes(group=1,ymax=df_obj$vals$mean, ymin=min), fill=\"#FF7F7F\")+\n        geom_rect(aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=df_obj$vals$mean-df_obj$vals$sd, ymax=df_obj$vals$mean+df_obj$vals$sd), fill=\"white\")+\n        geom_hline(yintercept=df_obj$vals$mean, lty=\"dashed\")+\n        geom_hline(yintercept=df_obj$vals$mean+df_obj$vals$sd)+\n        geom_hline(yintercept=df_obj$vals$mean-df_obj$vals$sd)+\n        geom_line(aes(group=1), lwd=1)+\n        labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n        theme_bw() + theme(title = element_text(size=14, face = \"bold\"))\n      \n      if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n        plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n      } else {\n        plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n      }\n      plot_main\n      \n    } else {\n      #facet plot\n      \n      plot_sec&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n        facet_wrap(~subnm, ncol=ifelse(length(unique(df_obj$data$subnm))&lt;4,1,2), scales = \"free_y\")+\n        geom_ribbon(data=df_obj$pos, aes(group=subnm,ymax=max, ymin=mean),fill=\"#7FFF7F\")+\n        geom_ribbon(data=df_obj$neg, aes(group=subnm,ymax=mean, ymin=min), fill=\"#FF7F7F\")+\n        geom_rect(data=merge(df_obj$data,df_obj$vals), aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=mean-sd, ymax=mean+sd), fill=\"white\")+\n        geom_hline(aes(yintercept=mean), lty=\"dashed\",data=df_obj$vals)+\n        geom_hline(aes(yintercept=mean+sd),data=df_obj$vals)+\n        geom_hline(aes(yintercept=mean-sd),data=df_obj$vals)+\n        geom_line(aes(group=1), lwd=0.75)+\n        labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n        theme_bw()+theme(strip.background = element_blank(),\n                         strip.text = element_text(face=\"bold\"),\n                         title = element_text(size=14, face = \"bold\"))\n      \n      if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n        plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n      } else {\n        # plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n      }\n      plot_sec\n      \n    }\n  }\n  \n  ####GET DATA####\n  dat_shrt_nms&lt;-data.frame(c(\n    oilsp=\"Oil Spills\",\n    nav=\"Nuisance Aquatic Vegetation\",\n    rdrum=\"Red Drum\",\n    blcrab=\"Blue Crab Catch\",\n    brpeli=\"Brown Pelican\",\n    oystercat=\"Oyster Catch\",\n    persmbusi=\"Percent Small Business\",\n    vesfish=\"Seafood Dealers & Vessels Fishing\",\n    unemploy=\"Unemployment\",\n    precip=\"Precipitation\",\n    airtemps=\"Air Temperature\"\n  ))\n  dat_shrt_nms&lt;-tibble::rownames_to_column(dat_shrt_nms)\n  colnames(dat_shrt_nms)&lt;-c(\"short\", \"long\")\n  \n  #Data 1\n  shrt_nm&lt;-reactive({dat_shrt_nms$short[dat_shrt_nms$long==input$data]})\n  data_url &lt;-reactive({paste0(\"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/\",shrt_nm(),\"_li.r\")})\n  dat_vl&lt;-reactive({source(url(data_url()))})\n  dat&lt;-reactive({dat_vl()$value})\n  \n  #Data 2\n  shrt_nm2&lt;-reactive({dat_shrt_nms$short[dat_shrt_nms$long==input$data2]})\n  data_url2 &lt;-reactive({paste0(\"https://raw.githubusercontent.com/BrittanyTroast-NOAA/BBESR_DataViz/main/Data_Obj/Data_R/\",shrt_nm2(),\"_li.r\")})\n  dat_vl2&lt;-reactive({source(url(data_url2()))})\n  dat2&lt;-reactive({dat_vl2()$value})\n  \n  ####CUSTOM SLIDER####\n  observe({\n    shinyjs::click(\"goButton\")\n  })\n  \n  observeEvent(input$data, {\n    selected_data&lt;- dat()$data\n    updateSliderInput(session, \"yearSlider\",\n                      min = min(selected_data$year),\n                      max= max(selected_data$year),\n                      value=c(min(selected_data$year), max(selected_data$year)), step=1)\n  })\n  \n  observeEvent(input$reset,{\n    selected_data&lt;- dat()$data\n    updateSliderInput(session,'yearSlider',value = c(min(selected_data$year), max(selected_data$year)))\n    \n  })\n  \n  \n  \n  observeEvent(input$goButton, {\n    \n    ####MAIN PLOT####\n    output$plot&lt;-renderPlotly({\n      df_pick &lt;- dat()\n      plot_gg&lt;-plot_fn_obj(df_pick)\n      plotly_gg&lt;-ggplotly(plot_gg)\n      plotly_gg\n      \n    })\n    \n    ####OutputSwtich####\n    output$message_or_plot&lt;- renderUI({\n      \n      if(input$data2 == \"\"){\n        return(h2(\"Please choose a second indicator from the 'Compare Indicator' dropdown\"))\n      } else {\n        plotlyOutput(\"compare\", height = '120%')\n      }\n      \n    })\n    \n    ####Compare Plot####\n    output$compare&lt;-renderPlotly({\n      \n      dat1_df&lt;-dat()\n      dat2_df&lt;-dat2()\n      \n      df_pick1&lt;-dat1_df$data\n      df_pick2&lt;-dat2_df$data\n      \n      a_dat &lt;- subset(df_pick1, df_pick1$year&gt;= isolate(input$yearSlider[1]) & df_pick1$year&lt;= isolate(input$yearSlider[2]))\n      b_dat &lt;- subset(df_pick2, df_pick2$year&gt;= isolate(input$yearSlider[1]) & df_pick2$year&lt;= isolate(input$yearSlider[2]))\n      \n      a_dat$scaled&lt;-scale(a_dat$value)\n      b_dat$scaled&lt;-scale(b_dat$value)\n      \n      a_dat$indicator&lt;-input$data\n      b_dat$indicator&lt;-input$data2\n      \n      ab_dat&lt;-as.data.frame(rbind(cbind(a_dat$year, a_dat$scaled, a_dat$indicator), cbind(b_dat$year, b_dat$scaled, b_dat$indicator)))\n      colnames(ab_dat)&lt;-c(\"year\", \"scaled\", \"indicator\")\n      ab_dat[,1:2]&lt;-lapply(ab_dat[,1:2], as.numeric)\n      \n      p&lt;-ggplot(ab_dat, aes(x=year, y=scaled))+\n        geom_hline(yintercept = 0, color=\"gray50\", lwd=0.5, lty=\"dashed\")+\n        geom_line(aes(color=indicator), lwd=1)+\n        scale_color_manual(values = c(\"blue\", \"red\"))+\n        labs(x=\"Year\", y=\"Scaled Value\", color=\"Selected Indicators\")+\n        theme_bw() + theme(legend.position = \"bottom\")\n      \n      ggplotly(p) %&gt;%\n        layout(legend=list(y=1.1,x=0.5, xanchor=\"center\", yanchor=\"center\", orientation=\"h\"))\n    })\n    \n    output$nocompare&lt;-renderText({\n      \"Please select and indicator to compare from the 'Compare Indicator' dropdown.\"\n    })\n    \n\n    \n  })\n  \n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BB ESR Viz Intro",
    "section": "",
    "text": "Update renv\nThings I should put here\n\nGeneral info about the BB ESR\nPictures of front of it\nLink to the ESR\nExecutive Summary?\nTest to see if things change…again"
  }
]