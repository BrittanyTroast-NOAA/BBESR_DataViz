[
  {
    "objectID": "Second_Page.html",
    "href": "Second_Page.html",
    "title": "Second_Page",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  # App title ----\n  title = \"Hello Shiny!\",\n  # Sidebar panel for inputs ----\n  sidebar = sidebar(\n    # Input: Slider for the number of bins ----\n    sliderInput(\n      inputId = \"bins\",\n      label = \"Number of bins:\",\n      min = 1,\n      max = 50,\n      value = 30\n    )\n  ),\n  # Output: Histogram ----\n  plotOutput(outputId = \"distPlot\", width=\"80%\")\n)\n\nserver &lt;- function(input, output) {\n\n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot &lt;- renderPlot({\n\n    x    &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n    hist(x, breaks = bins, col = \"yellow\", border = \"green\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Second app on page?\")\n\n    })\n\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "Second_Page.html#app-3",
    "href": "Second_Page.html#app-3",
    "title": "Second_Page",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  # App title ----\n  title = \"Hello Shiny!\",\n  # Sidebar panel for inputs ----\n  sidebar = sidebar(\n    # Input: Slider for the number of bins ----\n    sliderInput(\n      inputId = \"bins\",\n      label = \"Number of bins:\",\n      min = 1,\n      max = 50,\n      value = 30\n    )\n  ),\n  # Output: Histogram ----\n  plotOutput(outputId = \"distPlot\", width=\"80%\")\n)\n\nserver &lt;- function(input, output) {\n\n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot &lt;- renderPlot({\n\n    x    &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n    hist(x, breaks = bins, col = \"yellow\", border = \"green\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Second app on page?\")\n\n    })\n\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "First_Page.html",
    "href": "First_Page.html",
    "title": "First_Page",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(plotly)\n# library(png)\nlibrary(gt)\nlibrary(shinythemes)\nlibrary(cowplot)\nlibrary(gtExtras)  \nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  # App title ----\n  title = \"Hello Shiny!\",\n  # Sidebar panel for inputs ----\n  sidebar = sidebar(\n    # Input: Slider for the number of bins ----\n    sliderInput(\n      inputId = \"bins\",\n      label = \"Number of bins:\",\n      min = 1,\n      max = 50,\n      value = 30\n    )\n  ),\n  # Output: Histogram ----\n  plotOutput(outputId = \"distPlot\", width=\"80%\")\n)\n\nserver &lt;- function(input, output) {\n\n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot &lt;- renderPlot({\n\n    x    &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n    hist(x, breaks = bins, col = \"yellow\", border = \"green\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Second app on page?\")\n\n    })\n\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BB ESR Viz Intro",
    "section": "",
    "text": "Here is the title page to the repo website.\nThings I should put here\n\nGeneral info about the BB ESR\nPictures of front of it\nLink to the ESR\nExecutive Summary?\nTest to see if things change…again"
  },
  {
    "objectID": "First_Page.html#part-of-old-app",
    "href": "First_Page.html#part-of-old-app",
    "title": "First_Page",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(plotly)\n# library(png)\nlibrary(gt)\nlibrary(shinythemes)\nlibrary(cowplot)\nlibrary(gtExtras)  \nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  # App title ----\n  title = \"Hello Shiny!\",\n  # Sidebar panel for inputs ----\n  sidebar = sidebar(\n    # Input: Slider for the number of bins ----\n    sliderInput(\n      inputId = \"bins\",\n      label = \"Number of bins:\",\n      min = 1,\n      max = 50,\n      value = 30\n    )\n  ),\n  # Output: Histogram ----\n  plotOutput(outputId = \"distPlot\", width=\"80%\")\n)\n\nserver &lt;- function(input, output) {\n\n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot &lt;- renderPlot({\n\n    x    &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n    hist(x, breaks = bins, col = \"yellow\", border = \"green\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Second app on page?\")\n\n    })\n\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "Sep_Doc.html",
    "href": "Sep_Doc.html",
    "title": "Sep_Doc",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(plotly)\n# library(png)\nlibrary(gt)\nlibrary(shinythemes)\nlibrary(cowplot)\nlibrary(gtExtras)  \nlibrary(bslib)\n\n#####FUNCTION#####\n\nplot_fn_obj&lt;-function(df_obj) {\n  \n  \n  if (ncol(df_obj$data)&lt;5.5){\n    #single plot\n    plot_main&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n      geom_ribbon(data=df_obj$pos, aes(group=1,ymax=max, ymin=df_obj$vals$mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=df_obj$neg, aes(group=1,ymax=df_obj$vals$mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=df_obj$vals$mean-df_obj$vals$sd, ymax=df_obj$vals$mean+df_obj$vals$sd), fill=\"white\")+\n      geom_hline(yintercept=df_obj$vals$mean, lty=\"dashed\")+\n      geom_hline(yintercept=df_obj$vals$mean+df_obj$vals$sd)+\n      geom_hline(yintercept=df_obj$vals$mean-df_obj$vals$sd)+\n      geom_line(aes(group=1), lwd=1)+\n      labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n      theme_bw() + theme(title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n    } else {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n    }\n    plot_main\n    \n  } else {\n    #facet plot\n    \n    plot_sec&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n      facet_wrap(~subnm, ncol=1, scales = \"free_y\")+\n      geom_ribbon(data=df_obj$pos, aes(group=subnm,ymax=max, ymin=mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=df_obj$neg, aes(group=subnm,ymax=mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(data=merge(df_obj$data,df_obj$vals), aes(xmin=allminyear,xmax=allmaxyear,ymin=mean-sd, ymax=mean+sd), fill=\"white\")+\n      geom_hline(aes(yintercept=mean), lty=\"dashed\",data=df_obj$vals)+\n      geom_hline(aes(yintercept=mean+sd),data=df_obj$vals)+\n      geom_hline(aes(yintercept=mean-sd),data=df_obj$vals)+\n      geom_line(aes(group=1), lwd=0.75)+\n      labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n      theme_bw()+theme(strip.background = element_blank(),\n                       strip.text = element_text(face=\"bold\"),\n                       title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n      plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n    } else {\n      # plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n    }\n    plot_sec\n    \n  }\n}\n\n\n#####Data Names#####\ndat_shrt_nms&lt;-c(\n  oilsp=\"Oil Spills\",\n  nav\"Nuisance Aquatic Vegetation\",\n  rdrum=\"Red Drum\",\n  blcrab=\"Blue Crab Catch\",\n  brpeli=\"Brown Pelican\",\n  oystercat=\"Oyster Catch\",\n  persmbusi=\"Percent Small Business\",\n  vesfish=\"Vessels Fishing & Seafood Dealers\"\n)\n\n#####UI#####\nui &lt;- navbarPage(\n  title = \"Barataria Basin ESR Tool\",\n  theme = shinytheme('flatly'),\n  \n  #Main Page\n  tabPanel(\n    title= \"Explore Indicators\",\n    \n    sidebarLayout(\n\n      sidebarPanel(h1(\"Data Selection\" , style = \"font-size:34px;\n                                                    text-align: center;\"), width = 4,\n                   selectInput(\"data\", label = h2(\"Choose Indicator:\", style = \"font-size:22px;\"), choices = c(\"Oil Spills\",\"Nuisance Aquatic Vegetation\",\"Red Drum\", \"Blue Crab Catch\",\"Brown Pelican\", \"Oyster Catch\",\"Percent Small Business\", \"Vessels Fishing & Seafood Dealers\")),\n                   tags$style(\".selectize-input {font-size: 18px}\"),\n                   tags$a(href=\"https://forms.gle/6ZWFZQuXUnDrfnqn9\", \"BB ESR Indicator Feedback Form\", style=\"font-size:26px;text-algin=center; margin-top: 50px; margin-left: 25px; text-align: center; font-weight:bold;\"),\n                   ),\n      ),\n      \n      \n      #####Main#####\n      mainPanel(plotlyOutput(\"plot\", height = \"500px\"),\n                # htmlOutput(\"time_range\"),\n                # tags$style(\"#time_range {font-size: 20px;\n                #                             margin-bottom: 0px;\n                #                             margin-top: -5px;}\"),\n                # gt_output(\"gt_table\"),\n                # htmlOutput(\"plain_header\"),\n                # htmlOutput(\"plain_text\"),\n                # tags$style(\"#plain_text {font-size:20px;\n                #                             margin-bottom: 25px;\n                #                             margin-top: 15px;}\"),\n                # tags$style(\"#plain_header {font-size:24px;\n                #                             margin-top: 25px;}\"),\n                \n      )\n    )),\n\n)\n\n#####Server#####\nserver &lt;- function(input, output) {\n  \n  #####Load Data Separately#####\n  get_data &lt;- reactive({\n  filename &lt;- paste0(dat_shrt_nms[input$data], \"_li.rds\")\n  get(load(filename))\n})\n  \n  #####Main plot#####\n  output$plot&lt;-renderPlotly({\n    df_pick &lt;- get_data()\n    plot_main&lt;-plot_fn(df_pick)\n    plotly_gg&lt;-ggplotly(plot_main)\n    df_cond&lt;-select(df_pick$data, -c(\"valence\",\"min\",\"max\"))\n    plotly_gg %&gt;%\n      rangeslider(start = min(df_cond$year), end = max(df_cond$year))\n    \n  })\n  \n  # ###View data table###\n  # output$df_view&lt;-renderTable({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   \n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   pos&lt;-pos_fn(df_dat)\n  #   neg&lt;-neg_fn(df_dat)\n  #   val_df&lt;-val_fn(df_dat)\n  #   \n  # })\n  \n  # #####Text Time Selected#####\n  # output$time_range&lt;- renderText({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   selected_data &lt;- event_data(\"plotly_relayout\")\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   sel_dat&lt;-df_dat[df_dat$year&gt;selected_data$xaxis.range[1] & df_dat$year&lt; selected_data$xaxis.range[2],]\n  #   \n  #   if (nrow(sel_dat)&gt;0) {\n  #     range&lt;-range(sel_dat$year)\n  #     paste0(\"&lt;b&gt;Time Frame=\",range[1],\"-\",range[2],\"&lt;/b&gt;\")\n  #   } else  {\n  #     range&lt;-range(df_dat$year)\n  #     paste0(\"&lt;b&gt;Time Frame=\",range[1],\"-\",range[2],\"&lt;/b&gt;\")\n  #   }\n  #   \n  #   \n  # })\n  # \n \n  #  #####Table#####\n  # output$gt_table&lt;- render_gt({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   selected_data &lt;- event_data(\"plotly_relayout\")\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   val_df&lt;-val_fn(df_dat)\n  #   \n  #   sel_dat&lt;-df_dat[df_dat$year&gt;selected_data$xaxis.range[1] & df_dat$year&lt; selected_data$xaxis.range[2],]\n  #   \n  #   if (nrow(sel_dat)&gt;3) {\n  #     if (ncol(df_dat)&lt;5.5) {\n  #       #Mean Trend\n  #       sel_dat_mean&lt;-mean(sel_dat$value) # mean value last 5 years\n  #       mean_sel&lt;-if_else(sel_dat_mean&gt;val_df$mean+val_df$sd, \"+\", if_else(sel_dat_mean&lt;val_df$mean-val_df$sd, \"-\",\"●\")) #qualify mean trend\n  #       \n  #       #Slope Trend\n  #       lmout&lt;-summary(lm(sel_dat$value~sel_dat$year))\n  #       sel_slope&lt;-coef(lmout)[2,1] * length(unique(sel_dat$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n  #       slope_sel&lt;-if_else(sel_slope&gt;val_df$sd, \"↑\", if_else(sel_slope&lt; c(-val_df$sd), \"↓\",\"→\"))\n  #       \n  #       ###Table stuff\n  #       new_table&lt;-data.frame(val=c(round(val_df$mean,2), round(val_df$sd,2), val_df$mean_sym, val_df$slope_sym, mean_sel, slope_sel),\n  #                             metric=c(\"Historical_Mean\",\"Historical_SD\",\"Last 5_Mean\", \"Last 5_Slope\",\"Selected_Mean\", \"Selected_Slope\"))\n  #       \n  #       new_table &lt;- new_table %&gt;% pivot_wider(names_from = metric, values_from = val)\n  #       \n  #       gt(new_table) %&gt;%\n  #         tab_spanner_delim(delim = \"_\") %&gt;%\n  #         tab_stubhead(label = \"Sub Indicator\") %&gt;% \n  #         tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n  #         tab_options(table.border.top.color = \"#3498db\",\n  #                     table.border.bottom.color = \"#3498db\",\n  #                     table.border.left.color = \"#3498db\",\n  #                     table.border.right.color = \"#3498db\",\n  #                     table.border.top.width = 5,\n  #                     table.border.bottom.width = 5,\n  #                     table.border.left.width = 5,\n  #                     table.border.right.width = 5,\n  #                     table.border.left.style = \"solid\",\n  #                     table.border.right.style = \"solid\",) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n  #     } else {\n  #       #Selected Multi Sub\n  #       \n  #       sub_list&lt;-list()\n  #       subs&lt;-unique(df_dat$subnm)\n  #       for (i in 1:length(subs)){\n  #         sub_df&lt;-sel_dat[sel_dat$subnm==subs[i],]\n  #         vals&lt;-val_df[val_df$subnm==subs[i],]\n  #         sub_dat_mean&lt;-mean(sub_df$value) # mean value last 5 years\n  #         mean_sub&lt;-if_else(sub_dat_mean&gt;vals$mean+vals$sd, \"+\", if_else(sub_dat_mean&lt;vals$mean-vals$sd, \"-\",\"●\")) #qualify mean trend\n  #         \n  #         #Slope Trend\n  #         lmout&lt;-summary(lm(sub_df$value~sub_df$year))\n  #         sub_slope&lt;-coef(lmout)[2,1] * length(unique(sub_df$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n  #         slope_sub&lt;-if_else(sub_slope&gt;vals$sd, \"↑\", if_else(sub_slope&lt; c(-vals$sd), \"↓\",\"→\"))\n  #         \n  #         add_sub&lt;-data.frame(mean_sel=mean_sub,\n  #                             slope_sel=slope_sub)\n  #         sub_list[[i]]&lt;-add_sub\n  #         \n  #       }\n  #       \n  #       add_sel_df&lt;-do.call(\"rbind\",sub_list)\n  #       val_df&lt;-cbind(val_df, add_sel_df)\n  #       \n  #       val_df$mean&lt;-as.character(val_df$mean)\n  #       val_df$sd&lt;-as.character(val_df$sd)\n  #       \n  #       new_table&lt;-val_df %&gt;% select(\"Sub_Indicator\"=subnm,\"Historical_Mean\"=mean, \"Historical_SD\"=sd, \"Last 5_Mean\"=mean_sym, \"Last 5_Slope\"=slope_sym, \"Selected_Mean\"=mean_sel, \"Selected_Slope\"=slope_sel) %&gt;% \n  #         group_by(Sub_Indicator) %&gt;% pivot_longer(cols = -c(\"Sub_Indicator\"))\n  #       \n  #       \n  #       new_table &lt;- new_table %&gt;% pivot_wider(names_from = name, values_from = value)\n  #       new_table[,2:3]&lt;-lapply(new_table[,2:3], function(x) {round(as.numeric(x),2)})\n  #       rownames(new_table)&lt;-new_table$Sub_Indicator\n  #       \n  #       gt(new_table, rowname_col = \"Sub_Indicator\", groupname_col = NA) %&gt;%\n  #         tab_spanner_delim(delim = \"_\") %&gt;%\n  #         tab_stubhead(label = \"Sub Indicator\") %&gt;% \n  #         tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n  #         tab_options(table.border.top.color = \"#3498db\",\n  #                     table.border.bottom.color = \"#3498db\",\n  #                     table.border.left.color = \"#3498db\",\n  #                     table.border.right.color = \"#3498db\",\n  #                     table.border.top.width = 5,\n  #                     table.border.bottom.width = 5,\n  #                     table.border.left.width = 5,\n  #                     table.border.right.width = 5,\n  #                     table.border.left.style = \"solid\",\n  #                     table.border.right.style = \"solid\",) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n  #     }\n  #     \n  #     \n  #   } else {\n  #     \n  #     ###Table stuff\n  #     if (ncol(df_dat)&lt;5.5) {\n  #       new_table&lt;-data.frame(val=c(round(val_df$mean,2), round(val_df$sd,2), val_df$mean_sym, val_df$slope_sym),\n  #                             metric=c(\"Historical_Mean\",\"Historical_SD\",\"Last 5_Mean\", \"Last 5_Slope\"))\n  #       \n  #       new_table &lt;- new_table %&gt;% pivot_wider(names_from = metric, values_from = val)\n  #       \n  #       gt(new_table) %&gt;%\n  #         tab_spanner_delim(delim = \"_\") %&gt;%\n  #         tab_stubhead(label = \"Sub Indicator\") %&gt;% \n  #         tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n  #         tab_options(table.border.top.color = \"#3498db\",\n  #                     table.border.bottom.color = \"#3498db\",\n  #                     table.border.left.color = \"#3498db\",\n  #                     table.border.right.color = \"#3498db\",\n  #                     table.border.top.width = 5,\n  #                     table.border.bottom.width = 5,\n  #                     table.border.left.width = 5,\n  #                     table.border.right.width = 5,\n  #                     table.border.left.style = \"solid\",\n  #                     table.border.right.style = \"solid\",) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n  #       \n  #     } else {\n  #       val_df$mean&lt;-as.character(val_df$mean)\n  #       val_df$sd&lt;-as.character(val_df$sd)\n  #       \n  #       new_table&lt;-val_df %&gt;% select(\"Sub_Indicator\"=subnm,\"Historical_Mean\"=mean, \"Historical_SD\"=sd, \"Last 5_Mean\"=mean_sym, \"Last 5_Slope\"=slope_sym) %&gt;% \n  #         group_by(Sub_Indicator) %&gt;% pivot_longer(cols = -c(\"Sub_Indicator\"))\n  #       \n  #       \n  #       new_table &lt;- new_table %&gt;% pivot_wider(names_from = name, values_from = value)\n  #       new_table[,2:3]&lt;-lapply(new_table[,2:3], function(x) {round(as.numeric(x),2)})\n  #       rownames(new_table)&lt;-new_table$Sub_Indicator\n  #       \n  #       gt(new_table, rowname_col = \"Sub_Indicator\", groupname_col = NA) %&gt;%\n  #         tab_spanner_delim(delim = \"_\") %&gt;%\n  #         tab_stubhead(label = \"Sub Indicator\") %&gt;% \n  #         tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n  #         tab_options(table.border.top.color = \"#3498db\",\n  #                     table.border.bottom.color = \"#3498db\",\n  #                     table.border.left.color = \"#3498db\",\n  #                     table.border.right.color = \"#3498db\",\n  #                     table.border.top.width = 5,\n  #                     table.border.bottom.width = 5,\n  #                     table.border.left.width = 5,\n  #                     table.border.right.width = 5,\n  #                     table.border.left.style = \"solid\",\n  #                     table.border.right.style = \"solid\",) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n  #       \n  #       \n  #       \n  #       \n  #       \n  #       \n  #       \n  #     }\n  #     \n  #   }\n  # })\n  # \n \n  #  #####Sel Trend Plot#####\n  # output$trend_plot&lt;- renderPlot({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   val_df&lt;-val_df(df_dat)\n  #   selected_data &lt;- event_data(\"plotly_relayout\")\n  #   sel_dat&lt;-df_dat[df_dat$year&gt;selected_data$xaxis.range[1] & df_dat$year&lt; selected_data$xaxis.range[2],]\n  #   \n  #   \n  #   if(nrow(sel_dat)&gt;3) {\n  #     \n  #     #Mean Trend\n  #     sel_dat_mean&lt;-mean(sel_dat$value) # mean value last 5 years\n  #     mean_tr_sel&lt;-if_else(sel_dat_mean&gt;val_df$mean+val_df$sd, \"ptPlus\", if_else(sel_dat_mean&lt;val_df$mean-val_df$sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n  #     \n  #     #Slope Trend\n  #     lmout&lt;-summary(lm(sel_dat$value~sel_dat$year))\n  #     sel_slope&lt;-coef(lmout)[2,1] * length(unique(sel_dat$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n  #     slope_tr_sel&lt;-if_else(sel_slope&gt;val_df$sd, \"arrowUp\", if_else(sel_slope&lt; c(-val_df$sd), \"arrowDown\",\"arrowRight\"))\n  #     \n  #     range&lt;-range(sel_dat$year)\n  #     \n  #     plot_trend&lt;-testtrend_base+\n  #       draw_image(get(mean_tr_sel), scale=0.35, y=0.25)+\n  #       draw_image(get(slope_tr_sel), scale=0.35, y=-0.3)+\n  #       labs(title = paste0(\"Selected Years\\n(\",range[1],\"-\",range[2],\")\"))\n  #     \n  #     plot_trend\n  #   }\n  #   \n  # }, bg=\"transparent\")\n  # \n  # #####Last5 Trend Plot#####\n  # output$trendplot_last5&lt;- renderPlot({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   val_df&lt;-val_fn(df_dat)\n  #   \n  #   testtrend_base+\n  #     draw_image(get(val_df$mean_tr), scale=0.35, y=0.25)+\n  #     draw_image(get(val_df$slope_tr), scale=0.35, y=-0.3)+\n  #     labs(title = \"Last Five Years\\nof Data\")\n  #   \n  # }, bg=\"transparent\")\n  # \n  # #####Plain Text#####\n  # output$plain_header&lt;- renderText({\n  #   plain_header&lt;-paste0(\"&lt;b&gt;&lt;u&gt;Summary&lt;/b&gt;&lt;/u&gt;\")\n  # })\n  # \n  # output$plain_text&lt;-renderText({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   df_lab&lt;-df_pick[1:3, c(1:ncol(df_pick))] #For example sake cutting to only col I need\n  #   val_df&lt;-val_fn(df_dat)\n  #   selected_data &lt;- event_data(\"plotly_relayout\")\n  #   sel_dat&lt;-df_dat[df_dat$year&gt;selected_data$xaxis.range[1] & df_dat$year&lt; selected_data$xaxis.range[2],]\n  #   \n  #   if (nrow(sel_dat)&lt;3) {\n  #     ###Not selected no subs\n  #     if (ncol(df_dat)&lt;5.5) {\n  #       text&lt;-paste0(\"The &lt;b&gt;\",df_lab[1,2] ,\"&lt;/b&gt; indicator has a historical mean of &lt;u&gt;&lt;b&gt;\", round(val_df$mean[1],2),\"&lt;/u&gt;&lt;/b&gt; ±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[1],2)  ,\"&lt;/u&gt;&lt;/b&gt; and trends for the last five years of data show mean values &lt;b&gt;&lt;u&gt;\",val_df$mean_word, \"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;u&gt;&lt;b&gt;\",val_df$slope_word, \"&lt;/u&gt;&lt;/b&gt; trend in slope.\")\n  #     } else {\n  #       ###Not slected subs\n  #       val_df$mean&lt;-as.character(val_df$mean)\n  #       val_df$sd&lt;-as.character(val_df$sd)\n  #       \n  #       new_table&lt;-val_df %&gt;% select(subnm, mean,  sd,  mean_sym,  slope_sym) %&gt;% \n  #         group_by(subnm) %&gt;% pivot_longer(cols = -c(subnm))\n  #       \n  #       val_df$mean&lt;-as.numeric(val_df$mean)\n  #       val_df$sd&lt;-as.numeric(val_df$sd)\n  #       \n  #       \n  #       text&lt;-paste0(\"The &lt;b&gt;\",df_lab[1,2] ,\"&lt;/b&gt; indicator for the &lt;u&gt;&lt;b&gt;\", val_df$subnm[1],\"&lt;/u&gt;&lt;/b&gt; sub indicator has a historical mean of &lt;u&gt;&lt;b&gt;\", round(val_df$mean[1],2),\"&lt;/u&gt;&lt;/b&gt; ±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[1],2)  ,\"&lt;/u&gt;&lt;/b&gt; and trends for the last five years of data show mean values &lt;b&gt;&lt;u&gt;\",val_df$mean_word[1], \"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;u&gt;&lt;b&gt;\",val_df$slope_word[1], \"&lt;/u&gt;&lt;/b&gt; trend in slope.\")\n  #       \n  #       text_li&lt;-list()\n  #       for (i in 2:length(val_df$subnm)) {\n  #         subtext&lt;-paste0(\"The &lt;u&gt;&lt;b&gt;\",val_df$subnm[i], \"&lt;/u&gt;&lt;/b&gt; sub index historical mean is &lt;u&gt;&lt;b&gt;\",round(val_df$mean[i],2),\"&lt;/u&gt;&lt;/b&gt;±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[i],2),\"&lt;/u&gt;&lt;/b&gt; and trends from the last five years of data show mean values&lt;u&gt;&lt;b&gt;\",val_df$mean_word[i],\"&lt;/u&gt;&lt;/b&gt; 1 standard deviation from the historical mean and &lt;u&gt;&lt;b&gt;\",val_df$slope_word[i], \"&lt;/u&gt;&lt;/b&gt; trend in slope.\") \n  #         text_li[[i]]&lt;-subtext\n  #       }\n  #       subs_text&lt;-do.call(\"paste\", text_li)\n  #       paste(text,subs_text)\n  #     }\n  #     \n  #     \n  #   } else {\n  #     if (ncol(df_dat)&lt;5.5) {\n  #       \n  #       #Selected no subs\n  #       #Mean Trend\n  #       sel_dat_mean&lt;-mean(sel_dat$value) # mean value last 5 years\n  #       mean_sel_word&lt;-if_else(sel_dat_mean&gt;val_df$mean+val_df$sd, \"greater\", if_else(sel_dat_mean&lt;val_df$mean-val_df$sd, \"below\",\"within\")) #qualify mean trend\n  #       \n  #       #Slope Trend\n  #       lmout&lt;-summary(lm(sel_dat$value~sel_dat$year))\n  #       sel_slope&lt;-coef(lmout)[2,1] * length(unique(sel_dat$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n  #       slope_sel_word&lt;-if_else(sel_slope&gt;val_df$sd, \"an increasing\", if_else(sel_slope&lt; c(-val_df$sd), \"a decreasing\",\"a stable\"))\n  #       \n  #       range&lt;-range(sel_dat$year)\n  #       \n  #       text&lt;-paste0(\"The &lt;b&gt;\",df_lab[1,2] ,\"&lt;/b&gt; indicator has a historical mean of &lt;u&gt;&lt;b&gt;\", round(val_df$mean[1],2),\"&lt;/u&gt;&lt;/b&gt; ±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[1],2)  ,\"&lt;/u&gt;&lt;/b&gt; and trends for the last five years of data show mean values &lt;b&gt;&lt;u&gt;\",val_df$mean_word, \"&lt;/u&gt;&lt;/b&gt; 1 standard deviation from the historical mean and &lt;b&gt;&lt;u&gt;\",val_df$slope_word, \"&lt;/b&gt;&lt;/u&gt; trend in slope. The trends in the selected years of data &lt;b&gt;(\",range[1],\"-\",range[2],\")&lt;/b&gt; show mean values &lt;b&gt;&lt;u&gt;\", mean_sel_word,\"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;b&gt;&lt;u&gt;\",slope_sel_word, \"&lt;/b&gt;&lt;/u&gt; trend in slope.\")\n  #       \n  #       \n  #     } else {\n  #       ###Selected w subs\n  #       sub_list&lt;-list()\n  #       subs&lt;-unique(df_dat$subnm)\n  #       for (i in 1:length(subs)){\n  #         sub_df&lt;-sel_dat[sel_dat$subnm==subs[i],]\n  #         vals&lt;-val_df[val_df$subnm==subs[i],]\n  #         sub_dat_mean&lt;-mean(sub_df$value) # mean value last 5 years\n  #         mean_sub&lt;-if_else(sub_dat_mean&gt;vals$mean+vals$sd, \"greater\", if_else(sub_dat_mean&lt;vals$mean-vals$sd, \"below\",\"within\")) #qualify mean trend\n  #         \n  #         #Slope Trend\n  #         lmout&lt;-summary(lm(sub_df$value~sub_df$year))\n  #         sub_slope&lt;-coef(lmout)[2,1] * length(unique(sub_df$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n  #         slope_sub&lt;-if_else(sub_slope&gt;vals$sd, \"an increasing\", if_else(sub_slope&lt; c(-vals$sd), \"a decreasing\",\"a stable\"))\n  #         \n  #         add_sub&lt;-data.frame(mean_sel=mean_sub,\n  #                             slope_sel=slope_sub)\n  #         sub_list[[i]]&lt;-add_sub\n  #         \n  #       }\n  #       add_sel_df&lt;-do.call(\"rbind\",sub_list)\n  #       val_df&lt;-cbind(val_df, add_sel_df)\n  #       \n  #       val_df$mean&lt;-as.character(val_df$mean)\n  #       val_df$sd&lt;-as.character(val_df$sd)\n  #       \n  #       val_df&lt;-val_df %&gt;% select(subnm,mean, sd, mean_word, slope_word, mean_sel, slope_sel)\n  #       val_df$mean&lt;-as.numeric(val_df$mean)\n  #       val_df$sd&lt;-as.numeric(val_df$sd)\n  #       \n  #       range&lt;-range(sel_dat$year)\n  #       \n  #       text&lt;-paste0(\"The &lt;b&gt;\",df_lab[1,2] ,\"&lt;/b&gt; indicator for the &lt;u&gt;&lt;b&gt;\", val_df$subnm[1],\"&lt;/u&gt;&lt;/b&gt; sub indicator has a historical mean of &lt;u&gt;&lt;b&gt;\", round(val_df$mean[1],2),\"&lt;/u&gt;&lt;/b&gt; ±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[1],2)  ,\"&lt;/u&gt;&lt;/b&gt; and trends for the last five years of data show mean values &lt;b&gt;&lt;u&gt;\",val_df$mean_word[1], \"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;u&gt;&lt;b&gt;\",val_df$slope_word[1], \"&lt;/u&gt;&lt;/b&gt; trend in slope. The trends in the selected years of data &lt;b&gt;(\",range[1],\"-\",range[2],\")&lt;/b&gt; show mean values &lt;b&gt;&lt;u&gt;\", val_df$mean_sel[1],\"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;b&gt;&lt;u&gt;\",val_df$slope_sel[1], \"&lt;/b&gt;&lt;/u&gt; trend in slope.\")\n  #       \n  #       text_li&lt;-list()\n  #       for (i in 2:length(val_df$subnm)) {\n  #         subtext&lt;-paste0(\"The &lt;u&gt;&lt;b&gt;\",val_df$subnm[i], \"&lt;/u&gt;&lt;/b&gt; sub index historical mean is &lt;u&gt;&lt;b&gt;\",round(val_df$mean[i],2),\" &lt;/u&gt;&lt;/b&gt;±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[i],2),\"&lt;/u&gt;&lt;/b&gt; and trends from the last five years of data show mean values &lt;u&gt;&lt;b&gt;\",val_df$mean_word[i],\"&lt;/u&gt;&lt;/b&gt; 1 standard deviation from the historical mean and &lt;u&gt;&lt;b&gt;\",val_df$slope_word[i], \"&lt;/u&gt;&lt;/b&gt; trend in slope. The trends in the selected years of data show mean values &lt;b&gt;&lt;u&gt;\", val_df$mean_sel[i],\"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;b&gt;&lt;u&gt;\",val_df$slope_sel[i], \"&lt;/b&gt;&lt;/u&gt; trend in slope.\") \n  #         text_li[[i]]&lt;-subtext\n  #       }\n  #       subs_text&lt;-do.call(\"paste\", text_li)\n  #       paste(text,subs_text)\n  #       \n  #     }\n  #     \n  #     \n  #   }\n  # })\n  # \n\n  # #####STUFF FOR INFO PAGE#####\n  # #Help fig\n  # output$plotimg&lt;-renderImage({\n  #   list(src=\"WWW/TS_info.png\",\n  #        contentType=\"image/png\",\n  #        align=\"center\")\n  # }, deleteFile = F)\n  # \n  # #Text\n  # output$introtext&lt;-renderText({\n  #   \n  #   introtext&lt;-\"This app is intended to provide a way to interact with indicators from the Barataria Basin Ecosystem Status Report (ESR). The Barataria Basin ESR is a report with over 100 indicators describing drivers, pressures, states, human activities, and human dimensions produced by NOAA's Integrated Ecosystem Assessment (IEA) program. This is a prototype app with a small selection of indicators in order to get feedback for a potential future product.\"\n  # })\n  # \n  # output$usehead&lt;-renderText({\n  #   \n  #   infotext&lt;-\"How to Use\"\n  # })\n  # \n  # output$infotext1&lt;-renderText({\n  #   \n  #   infotext1&lt;-\"&lt;b&gt;1.&lt;/b&gt; Begin by choosing the indicator from the dropdown menu on the left of the screen. &lt;br&gt;&lt;br&gt;\n  #     &lt;b&gt;2&lt;/b&gt;. The indicator time series plot will be updated on the right. Below is a figure on how to interpret the plot.\"\n  # })\n  # \n  # output$infotext2&lt;-renderText({\n  #   \n  #   infotext2&lt;-\"&lt;b&gt;3.&lt;/b&gt; Below the plot is a rangeslider. Pull on either end of the slider to customize the time range of the plot. The time frame you have chosen will appear in text below the slider, originally indicating the full time frame of the indicator. &lt;br&gt;&lt;br&gt;\n  #     &lt;b&gt;4.&lt;/b&gt; A table below the figure show the historical mean and standard deviation (presented as dashed and solid black horizontal lines) and the trends in mean and slope compared to those values of the last five years of data as presented in the ESR. This table will update with trends of mean and slope if a custom time frame is selected using the rangeslider. &lt;br&gt;&lt;br&gt;\n  #     &lt;b&gt;5.&lt;/b&gt; Below the table is a plain text summary of the table above, describing mean and SD values as well as trends in mean and slope for the last five years of data and slected time frames.\" \n  # })\n  # \n}\n\n\n\n# Run the application \napp&lt;-shinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "Sep_Doc.html#part-of-old-app",
    "href": "Sep_Doc.html#part-of-old-app",
    "title": "Sep_Doc",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(plotly)\n# library(png)\nlibrary(gt)\nlibrary(shinythemes)\nlibrary(cowplot)\nlibrary(gtExtras)  \nlibrary(bslib)\n\n#####FUNCTION#####\n\nplot_fn_obj&lt;-function(df_obj) {\n  \n  \n  if (ncol(df_obj$data)&lt;5.5){\n    #single plot\n    plot_main&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n      geom_ribbon(data=df_obj$pos, aes(group=1,ymax=max, ymin=df_obj$vals$mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=df_obj$neg, aes(group=1,ymax=df_obj$vals$mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(aes(xmin=min(df_obj$data$year),xmax=max(df_obj$data$year),ymin=df_obj$vals$mean-df_obj$vals$sd, ymax=df_obj$vals$mean+df_obj$vals$sd), fill=\"white\")+\n      geom_hline(yintercept=df_obj$vals$mean, lty=\"dashed\")+\n      geom_hline(yintercept=df_obj$vals$mean+df_obj$vals$sd)+\n      geom_hline(yintercept=df_obj$vals$mean-df_obj$vals$sd)+\n      geom_line(aes(group=1), lwd=1)+\n      labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n      theme_bw() + theme(title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n    } else {\n      plot_main&lt;-plot_main+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n    }\n    plot_main\n    \n  } else {\n    #facet plot\n    \n    plot_sec&lt;-ggplot(data=df_obj$data, aes(x=year, y=value))+\n      facet_wrap(~subnm, ncol=1, scales = \"free_y\")+\n      geom_ribbon(data=df_obj$pos, aes(group=subnm,ymax=max, ymin=mean),fill=\"#7FFF7F\")+\n      geom_ribbon(data=df_obj$neg, aes(group=subnm,ymax=mean, ymin=min), fill=\"#FF7F7F\")+\n      geom_rect(data=merge(df_obj$data,df_obj$vals), aes(xmin=allminyear,xmax=allmaxyear,ymin=mean-sd, ymax=mean+sd), fill=\"white\")+\n      geom_hline(aes(yintercept=mean), lty=\"dashed\",data=df_obj$vals)+\n      geom_hline(aes(yintercept=mean+sd),data=df_obj$vals)+\n      geom_hline(aes(yintercept=mean-sd),data=df_obj$vals)+\n      geom_line(aes(group=1), lwd=0.75)+\n      labs(x=\"Year\", y=df_obj$labs[2,2], title = df_obj$labs[1,2])+\n      theme_bw()+theme(strip.background = element_blank(),\n                       strip.text = element_text(face=\"bold\"),\n                       title = element_text(size=14, face = \"bold\"))\n    \n    if (max(df_obj$data$year)-min(df_obj$data$year)&gt;20) {\n      plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),5))\n    } else {\n      # plot_sec&lt;-plot_sec+scale_x_continuous(breaks = seq(min(df_obj$data$year),max(df_obj$data$year),2))\n    }\n    plot_sec\n    \n  }\n}\n\n\n#####Data Names#####\ndat_shrt_nms&lt;-c(\n  oilsp=\"Oil Spills\",\n  nav\"Nuisance Aquatic Vegetation\",\n  rdrum=\"Red Drum\",\n  blcrab=\"Blue Crab Catch\",\n  brpeli=\"Brown Pelican\",\n  oystercat=\"Oyster Catch\",\n  persmbusi=\"Percent Small Business\",\n  vesfish=\"Vessels Fishing & Seafood Dealers\"\n)\n\n#####UI#####\nui &lt;- navbarPage(\n  title = \"Barataria Basin ESR Tool\",\n  theme = shinytheme('flatly'),\n  \n  #Main Page\n  tabPanel(\n    title= \"Explore Indicators\",\n    \n    sidebarLayout(\n\n      sidebarPanel(h1(\"Data Selection\" , style = \"font-size:34px;\n                                                    text-align: center;\"), width = 4,\n                   selectInput(\"data\", label = h2(\"Choose Indicator:\", style = \"font-size:22px;\"), choices = c(\"Oil Spills\",\"Nuisance Aquatic Vegetation\",\"Red Drum\", \"Blue Crab Catch\",\"Brown Pelican\", \"Oyster Catch\",\"Percent Small Business\", \"Vessels Fishing & Seafood Dealers\")),\n                   tags$style(\".selectize-input {font-size: 18px}\"),\n                   tags$a(href=\"https://forms.gle/6ZWFZQuXUnDrfnqn9\", \"BB ESR Indicator Feedback Form\", style=\"font-size:26px;text-algin=center; margin-top: 50px; margin-left: 25px; text-align: center; font-weight:bold;\"),\n                   ),\n      ),\n      \n      \n      #####Main#####\n      mainPanel(plotlyOutput(\"plot\", height = \"500px\"),\n                # htmlOutput(\"time_range\"),\n                # tags$style(\"#time_range {font-size: 20px;\n                #                             margin-bottom: 0px;\n                #                             margin-top: -5px;}\"),\n                # gt_output(\"gt_table\"),\n                # htmlOutput(\"plain_header\"),\n                # htmlOutput(\"plain_text\"),\n                # tags$style(\"#plain_text {font-size:20px;\n                #                             margin-bottom: 25px;\n                #                             margin-top: 15px;}\"),\n                # tags$style(\"#plain_header {font-size:24px;\n                #                             margin-top: 25px;}\"),\n                \n      )\n    )),\n\n)\n\n#####Server#####\nserver &lt;- function(input, output) {\n  \n  #####Load Data Separately#####\n  get_data &lt;- reactive({\n  filename &lt;- paste0(dat_shrt_nms[input$data], \"_li.rds\")\n  get(load(filename))\n})\n  \n  #####Main plot#####\n  output$plot&lt;-renderPlotly({\n    df_pick &lt;- get_data()\n    plot_main&lt;-plot_fn(df_pick)\n    plotly_gg&lt;-ggplotly(plot_main)\n    df_cond&lt;-select(df_pick$data, -c(\"valence\",\"min\",\"max\"))\n    plotly_gg %&gt;%\n      rangeslider(start = min(df_cond$year), end = max(df_cond$year))\n    \n  })\n  \n  # ###View data table###\n  # output$df_view&lt;-renderTable({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   \n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   pos&lt;-pos_fn(df_dat)\n  #   neg&lt;-neg_fn(df_dat)\n  #   val_df&lt;-val_fn(df_dat)\n  #   \n  # })\n  \n  # #####Text Time Selected#####\n  # output$time_range&lt;- renderText({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   selected_data &lt;- event_data(\"plotly_relayout\")\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   sel_dat&lt;-df_dat[df_dat$year&gt;selected_data$xaxis.range[1] & df_dat$year&lt; selected_data$xaxis.range[2],]\n  #   \n  #   if (nrow(sel_dat)&gt;0) {\n  #     range&lt;-range(sel_dat$year)\n  #     paste0(\"&lt;b&gt;Time Frame=\",range[1],\"-\",range[2],\"&lt;/b&gt;\")\n  #   } else  {\n  #     range&lt;-range(df_dat$year)\n  #     paste0(\"&lt;b&gt;Time Frame=\",range[1],\"-\",range[2],\"&lt;/b&gt;\")\n  #   }\n  #   \n  #   \n  # })\n  # \n \n  #  #####Table#####\n  # output$gt_table&lt;- render_gt({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   selected_data &lt;- event_data(\"plotly_relayout\")\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   val_df&lt;-val_fn(df_dat)\n  #   \n  #   sel_dat&lt;-df_dat[df_dat$year&gt;selected_data$xaxis.range[1] & df_dat$year&lt; selected_data$xaxis.range[2],]\n  #   \n  #   if (nrow(sel_dat)&gt;3) {\n  #     if (ncol(df_dat)&lt;5.5) {\n  #       #Mean Trend\n  #       sel_dat_mean&lt;-mean(sel_dat$value) # mean value last 5 years\n  #       mean_sel&lt;-if_else(sel_dat_mean&gt;val_df$mean+val_df$sd, \"+\", if_else(sel_dat_mean&lt;val_df$mean-val_df$sd, \"-\",\"●\")) #qualify mean trend\n  #       \n  #       #Slope Trend\n  #       lmout&lt;-summary(lm(sel_dat$value~sel_dat$year))\n  #       sel_slope&lt;-coef(lmout)[2,1] * length(unique(sel_dat$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n  #       slope_sel&lt;-if_else(sel_slope&gt;val_df$sd, \"↑\", if_else(sel_slope&lt; c(-val_df$sd), \"↓\",\"→\"))\n  #       \n  #       ###Table stuff\n  #       new_table&lt;-data.frame(val=c(round(val_df$mean,2), round(val_df$sd,2), val_df$mean_sym, val_df$slope_sym, mean_sel, slope_sel),\n  #                             metric=c(\"Historical_Mean\",\"Historical_SD\",\"Last 5_Mean\", \"Last 5_Slope\",\"Selected_Mean\", \"Selected_Slope\"))\n  #       \n  #       new_table &lt;- new_table %&gt;% pivot_wider(names_from = metric, values_from = val)\n  #       \n  #       gt(new_table) %&gt;%\n  #         tab_spanner_delim(delim = \"_\") %&gt;%\n  #         tab_stubhead(label = \"Sub Indicator\") %&gt;% \n  #         tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n  #         tab_options(table.border.top.color = \"#3498db\",\n  #                     table.border.bottom.color = \"#3498db\",\n  #                     table.border.left.color = \"#3498db\",\n  #                     table.border.right.color = \"#3498db\",\n  #                     table.border.top.width = 5,\n  #                     table.border.bottom.width = 5,\n  #                     table.border.left.width = 5,\n  #                     table.border.right.width = 5,\n  #                     table.border.left.style = \"solid\",\n  #                     table.border.right.style = \"solid\",) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n  #     } else {\n  #       #Selected Multi Sub\n  #       \n  #       sub_list&lt;-list()\n  #       subs&lt;-unique(df_dat$subnm)\n  #       for (i in 1:length(subs)){\n  #         sub_df&lt;-sel_dat[sel_dat$subnm==subs[i],]\n  #         vals&lt;-val_df[val_df$subnm==subs[i],]\n  #         sub_dat_mean&lt;-mean(sub_df$value) # mean value last 5 years\n  #         mean_sub&lt;-if_else(sub_dat_mean&gt;vals$mean+vals$sd, \"+\", if_else(sub_dat_mean&lt;vals$mean-vals$sd, \"-\",\"●\")) #qualify mean trend\n  #         \n  #         #Slope Trend\n  #         lmout&lt;-summary(lm(sub_df$value~sub_df$year))\n  #         sub_slope&lt;-coef(lmout)[2,1] * length(unique(sub_df$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n  #         slope_sub&lt;-if_else(sub_slope&gt;vals$sd, \"↑\", if_else(sub_slope&lt; c(-vals$sd), \"↓\",\"→\"))\n  #         \n  #         add_sub&lt;-data.frame(mean_sel=mean_sub,\n  #                             slope_sel=slope_sub)\n  #         sub_list[[i]]&lt;-add_sub\n  #         \n  #       }\n  #       \n  #       add_sel_df&lt;-do.call(\"rbind\",sub_list)\n  #       val_df&lt;-cbind(val_df, add_sel_df)\n  #       \n  #       val_df$mean&lt;-as.character(val_df$mean)\n  #       val_df$sd&lt;-as.character(val_df$sd)\n  #       \n  #       new_table&lt;-val_df %&gt;% select(\"Sub_Indicator\"=subnm,\"Historical_Mean\"=mean, \"Historical_SD\"=sd, \"Last 5_Mean\"=mean_sym, \"Last 5_Slope\"=slope_sym, \"Selected_Mean\"=mean_sel, \"Selected_Slope\"=slope_sel) %&gt;% \n  #         group_by(Sub_Indicator) %&gt;% pivot_longer(cols = -c(\"Sub_Indicator\"))\n  #       \n  #       \n  #       new_table &lt;- new_table %&gt;% pivot_wider(names_from = name, values_from = value)\n  #       new_table[,2:3]&lt;-lapply(new_table[,2:3], function(x) {round(as.numeric(x),2)})\n  #       rownames(new_table)&lt;-new_table$Sub_Indicator\n  #       \n  #       gt(new_table, rowname_col = \"Sub_Indicator\", groupname_col = NA) %&gt;%\n  #         tab_spanner_delim(delim = \"_\") %&gt;%\n  #         tab_stubhead(label = \"Sub Indicator\") %&gt;% \n  #         tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n  #         tab_options(table.border.top.color = \"#3498db\",\n  #                     table.border.bottom.color = \"#3498db\",\n  #                     table.border.left.color = \"#3498db\",\n  #                     table.border.right.color = \"#3498db\",\n  #                     table.border.top.width = 5,\n  #                     table.border.bottom.width = 5,\n  #                     table.border.left.width = 5,\n  #                     table.border.right.width = 5,\n  #                     table.border.left.style = \"solid\",\n  #                     table.border.right.style = \"solid\",) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n  #     }\n  #     \n  #     \n  #   } else {\n  #     \n  #     ###Table stuff\n  #     if (ncol(df_dat)&lt;5.5) {\n  #       new_table&lt;-data.frame(val=c(round(val_df$mean,2), round(val_df$sd,2), val_df$mean_sym, val_df$slope_sym),\n  #                             metric=c(\"Historical_Mean\",\"Historical_SD\",\"Last 5_Mean\", \"Last 5_Slope\"))\n  #       \n  #       new_table &lt;- new_table %&gt;% pivot_wider(names_from = metric, values_from = val)\n  #       \n  #       gt(new_table) %&gt;%\n  #         tab_spanner_delim(delim = \"_\") %&gt;%\n  #         tab_stubhead(label = \"Sub Indicator\") %&gt;% \n  #         tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n  #         tab_options(table.border.top.color = \"#3498db\",\n  #                     table.border.bottom.color = \"#3498db\",\n  #                     table.border.left.color = \"#3498db\",\n  #                     table.border.right.color = \"#3498db\",\n  #                     table.border.top.width = 5,\n  #                     table.border.bottom.width = 5,\n  #                     table.border.left.width = 5,\n  #                     table.border.right.width = 5,\n  #                     table.border.left.style = \"solid\",\n  #                     table.border.right.style = \"solid\",) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n  #       \n  #     } else {\n  #       val_df$mean&lt;-as.character(val_df$mean)\n  #       val_df$sd&lt;-as.character(val_df$sd)\n  #       \n  #       new_table&lt;-val_df %&gt;% select(\"Sub_Indicator\"=subnm,\"Historical_Mean\"=mean, \"Historical_SD\"=sd, \"Last 5_Mean\"=mean_sym, \"Last 5_Slope\"=slope_sym) %&gt;% \n  #         group_by(Sub_Indicator) %&gt;% pivot_longer(cols = -c(\"Sub_Indicator\"))\n  #       \n  #       \n  #       new_table &lt;- new_table %&gt;% pivot_wider(names_from = name, values_from = value)\n  #       new_table[,2:3]&lt;-lapply(new_table[,2:3], function(x) {round(as.numeric(x),2)})\n  #       rownames(new_table)&lt;-new_table$Sub_Indicator\n  #       \n  #       gt(new_table, rowname_col = \"Sub_Indicator\", groupname_col = NA) %&gt;%\n  #         tab_spanner_delim(delim = \"_\") %&gt;%\n  #         tab_stubhead(label = \"Sub Indicator\") %&gt;% \n  #         tab_header(title = \"Trends in Mean & Slope\") %&gt;%\n  #         tab_options(table.border.top.color = \"#3498db\",\n  #                     table.border.bottom.color = \"#3498db\",\n  #                     table.border.left.color = \"#3498db\",\n  #                     table.border.right.color = \"#3498db\",\n  #                     table.border.top.width = 5,\n  #                     table.border.bottom.width = 5,\n  #                     table.border.left.width = 5,\n  #                     table.border.right.width = 5,\n  #                     table.border.left.style = \"solid\",\n  #                     table.border.right.style = \"solid\",) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_body()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stubhead()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18), weight = \"bold\", color=\"#2c3e50\"),locations = cells_stub()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(18)),locations = cells_column_labels()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(20), weight = \"bold\", color=\"#2c3e50\"),locations = cells_column_spanners()) %&gt;%\n  #         tab_style(style = cell_text(align = \"center\", size=px(24), color=\"#3498db\", weight = \"bold\"),locations = cells_title())\n  #       \n  #       \n  #       \n  #       \n  #       \n  #       \n  #       \n  #     }\n  #     \n  #   }\n  # })\n  # \n \n  #  #####Sel Trend Plot#####\n  # output$trend_plot&lt;- renderPlot({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   val_df&lt;-val_df(df_dat)\n  #   selected_data &lt;- event_data(\"plotly_relayout\")\n  #   sel_dat&lt;-df_dat[df_dat$year&gt;selected_data$xaxis.range[1] & df_dat$year&lt; selected_data$xaxis.range[2],]\n  #   \n  #   \n  #   if(nrow(sel_dat)&gt;3) {\n  #     \n  #     #Mean Trend\n  #     sel_dat_mean&lt;-mean(sel_dat$value) # mean value last 5 years\n  #     mean_tr_sel&lt;-if_else(sel_dat_mean&gt;val_df$mean+val_df$sd, \"ptPlus\", if_else(sel_dat_mean&lt;val_df$mean-val_df$sd, \"ptMinus\",\"ptSolid\")) #qualify mean trend\n  #     \n  #     #Slope Trend\n  #     lmout&lt;-summary(lm(sel_dat$value~sel_dat$year))\n  #     sel_slope&lt;-coef(lmout)[2,1] * length(unique(sel_dat$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n  #     slope_tr_sel&lt;-if_else(sel_slope&gt;val_df$sd, \"arrowUp\", if_else(sel_slope&lt; c(-val_df$sd), \"arrowDown\",\"arrowRight\"))\n  #     \n  #     range&lt;-range(sel_dat$year)\n  #     \n  #     plot_trend&lt;-testtrend_base+\n  #       draw_image(get(mean_tr_sel), scale=0.35, y=0.25)+\n  #       draw_image(get(slope_tr_sel), scale=0.35, y=-0.3)+\n  #       labs(title = paste0(\"Selected Years\\n(\",range[1],\"-\",range[2],\")\"))\n  #     \n  #     plot_trend\n  #   }\n  #   \n  # }, bg=\"transparent\")\n  # \n  # #####Last5 Trend Plot#####\n  # output$trendplot_last5&lt;- renderPlot({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   val_df&lt;-val_fn(df_dat)\n  #   \n  #   testtrend_base+\n  #     draw_image(get(val_df$mean_tr), scale=0.35, y=0.25)+\n  #     draw_image(get(val_df$slope_tr), scale=0.35, y=-0.3)+\n  #     labs(title = \"Last Five Years\\nof Data\")\n  #   \n  # }, bg=\"transparent\")\n  # \n  # #####Plain Text#####\n  # output$plain_header&lt;- renderText({\n  #   plain_header&lt;-paste0(\"&lt;b&gt;&lt;u&gt;Summary&lt;/b&gt;&lt;/u&gt;\")\n  # })\n  # \n  # output$plain_text&lt;-renderText({\n  #       df_pick &lt;- switch(input$data, \"Nuisance Aquatic Vegetation\"=nav,\"Oil Spills\"=oilsp, \"Red Drum\"=drum, \"Blue Crab Catch\"=blucrabcat,\"Brown Pelican\"=brownpeli, \"Oyster Catch\"=oystercat,\"Percent Small Business\"=persmallbusi,\"Vessels Fishing & Seafood Dealers\"=vesfish)\n  #   df_dat&lt;-df_dat_fn(df_pick)\n  #   df_lab&lt;-df_pick[1:3, c(1:ncol(df_pick))] #For example sake cutting to only col I need\n  #   val_df&lt;-val_fn(df_dat)\n  #   selected_data &lt;- event_data(\"plotly_relayout\")\n  #   sel_dat&lt;-df_dat[df_dat$year&gt;selected_data$xaxis.range[1] & df_dat$year&lt; selected_data$xaxis.range[2],]\n  #   \n  #   if (nrow(sel_dat)&lt;3) {\n  #     ###Not selected no subs\n  #     if (ncol(df_dat)&lt;5.5) {\n  #       text&lt;-paste0(\"The &lt;b&gt;\",df_lab[1,2] ,\"&lt;/b&gt; indicator has a historical mean of &lt;u&gt;&lt;b&gt;\", round(val_df$mean[1],2),\"&lt;/u&gt;&lt;/b&gt; ±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[1],2)  ,\"&lt;/u&gt;&lt;/b&gt; and trends for the last five years of data show mean values &lt;b&gt;&lt;u&gt;\",val_df$mean_word, \"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;u&gt;&lt;b&gt;\",val_df$slope_word, \"&lt;/u&gt;&lt;/b&gt; trend in slope.\")\n  #     } else {\n  #       ###Not slected subs\n  #       val_df$mean&lt;-as.character(val_df$mean)\n  #       val_df$sd&lt;-as.character(val_df$sd)\n  #       \n  #       new_table&lt;-val_df %&gt;% select(subnm, mean,  sd,  mean_sym,  slope_sym) %&gt;% \n  #         group_by(subnm) %&gt;% pivot_longer(cols = -c(subnm))\n  #       \n  #       val_df$mean&lt;-as.numeric(val_df$mean)\n  #       val_df$sd&lt;-as.numeric(val_df$sd)\n  #       \n  #       \n  #       text&lt;-paste0(\"The &lt;b&gt;\",df_lab[1,2] ,\"&lt;/b&gt; indicator for the &lt;u&gt;&lt;b&gt;\", val_df$subnm[1],\"&lt;/u&gt;&lt;/b&gt; sub indicator has a historical mean of &lt;u&gt;&lt;b&gt;\", round(val_df$mean[1],2),\"&lt;/u&gt;&lt;/b&gt; ±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[1],2)  ,\"&lt;/u&gt;&lt;/b&gt; and trends for the last five years of data show mean values &lt;b&gt;&lt;u&gt;\",val_df$mean_word[1], \"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;u&gt;&lt;b&gt;\",val_df$slope_word[1], \"&lt;/u&gt;&lt;/b&gt; trend in slope.\")\n  #       \n  #       text_li&lt;-list()\n  #       for (i in 2:length(val_df$subnm)) {\n  #         subtext&lt;-paste0(\"The &lt;u&gt;&lt;b&gt;\",val_df$subnm[i], \"&lt;/u&gt;&lt;/b&gt; sub index historical mean is &lt;u&gt;&lt;b&gt;\",round(val_df$mean[i],2),\"&lt;/u&gt;&lt;/b&gt;±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[i],2),\"&lt;/u&gt;&lt;/b&gt; and trends from the last five years of data show mean values&lt;u&gt;&lt;b&gt;\",val_df$mean_word[i],\"&lt;/u&gt;&lt;/b&gt; 1 standard deviation from the historical mean and &lt;u&gt;&lt;b&gt;\",val_df$slope_word[i], \"&lt;/u&gt;&lt;/b&gt; trend in slope.\") \n  #         text_li[[i]]&lt;-subtext\n  #       }\n  #       subs_text&lt;-do.call(\"paste\", text_li)\n  #       paste(text,subs_text)\n  #     }\n  #     \n  #     \n  #   } else {\n  #     if (ncol(df_dat)&lt;5.5) {\n  #       \n  #       #Selected no subs\n  #       #Mean Trend\n  #       sel_dat_mean&lt;-mean(sel_dat$value) # mean value last 5 years\n  #       mean_sel_word&lt;-if_else(sel_dat_mean&gt;val_df$mean+val_df$sd, \"greater\", if_else(sel_dat_mean&lt;val_df$mean-val_df$sd, \"below\",\"within\")) #qualify mean trend\n  #       \n  #       #Slope Trend\n  #       lmout&lt;-summary(lm(sel_dat$value~sel_dat$year))\n  #       sel_slope&lt;-coef(lmout)[2,1] * length(unique(sel_dat$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n  #       slope_sel_word&lt;-if_else(sel_slope&gt;val_df$sd, \"an increasing\", if_else(sel_slope&lt; c(-val_df$sd), \"a decreasing\",\"a stable\"))\n  #       \n  #       range&lt;-range(sel_dat$year)\n  #       \n  #       text&lt;-paste0(\"The &lt;b&gt;\",df_lab[1,2] ,\"&lt;/b&gt; indicator has a historical mean of &lt;u&gt;&lt;b&gt;\", round(val_df$mean[1],2),\"&lt;/u&gt;&lt;/b&gt; ±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[1],2)  ,\"&lt;/u&gt;&lt;/b&gt; and trends for the last five years of data show mean values &lt;b&gt;&lt;u&gt;\",val_df$mean_word, \"&lt;/u&gt;&lt;/b&gt; 1 standard deviation from the historical mean and &lt;b&gt;&lt;u&gt;\",val_df$slope_word, \"&lt;/b&gt;&lt;/u&gt; trend in slope. The trends in the selected years of data &lt;b&gt;(\",range[1],\"-\",range[2],\")&lt;/b&gt; show mean values &lt;b&gt;&lt;u&gt;\", mean_sel_word,\"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;b&gt;&lt;u&gt;\",slope_sel_word, \"&lt;/b&gt;&lt;/u&gt; trend in slope.\")\n  #       \n  #       \n  #     } else {\n  #       ###Selected w subs\n  #       sub_list&lt;-list()\n  #       subs&lt;-unique(df_dat$subnm)\n  #       for (i in 1:length(subs)){\n  #         sub_df&lt;-sel_dat[sel_dat$subnm==subs[i],]\n  #         vals&lt;-val_df[val_df$subnm==subs[i],]\n  #         sub_dat_mean&lt;-mean(sub_df$value) # mean value last 5 years\n  #         mean_sub&lt;-if_else(sub_dat_mean&gt;vals$mean+vals$sd, \"greater\", if_else(sub_dat_mean&lt;vals$mean-vals$sd, \"below\",\"within\")) #qualify mean trend\n  #         \n  #         #Slope Trend\n  #         lmout&lt;-summary(lm(sub_df$value~sub_df$year))\n  #         sub_slope&lt;-coef(lmout)[2,1] * length(unique(sub_df$year)) #multiply by years in the trend (slope per year * number of years=rise over 5 years)\n  #         slope_sub&lt;-if_else(sub_slope&gt;vals$sd, \"an increasing\", if_else(sub_slope&lt; c(-vals$sd), \"a decreasing\",\"a stable\"))\n  #         \n  #         add_sub&lt;-data.frame(mean_sel=mean_sub,\n  #                             slope_sel=slope_sub)\n  #         sub_list[[i]]&lt;-add_sub\n  #         \n  #       }\n  #       add_sel_df&lt;-do.call(\"rbind\",sub_list)\n  #       val_df&lt;-cbind(val_df, add_sel_df)\n  #       \n  #       val_df$mean&lt;-as.character(val_df$mean)\n  #       val_df$sd&lt;-as.character(val_df$sd)\n  #       \n  #       val_df&lt;-val_df %&gt;% select(subnm,mean, sd, mean_word, slope_word, mean_sel, slope_sel)\n  #       val_df$mean&lt;-as.numeric(val_df$mean)\n  #       val_df$sd&lt;-as.numeric(val_df$sd)\n  #       \n  #       range&lt;-range(sel_dat$year)\n  #       \n  #       text&lt;-paste0(\"The &lt;b&gt;\",df_lab[1,2] ,\"&lt;/b&gt; indicator for the &lt;u&gt;&lt;b&gt;\", val_df$subnm[1],\"&lt;/u&gt;&lt;/b&gt; sub indicator has a historical mean of &lt;u&gt;&lt;b&gt;\", round(val_df$mean[1],2),\"&lt;/u&gt;&lt;/b&gt; ±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[1],2)  ,\"&lt;/u&gt;&lt;/b&gt; and trends for the last five years of data show mean values &lt;b&gt;&lt;u&gt;\",val_df$mean_word[1], \"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;u&gt;&lt;b&gt;\",val_df$slope_word[1], \"&lt;/u&gt;&lt;/b&gt; trend in slope. The trends in the selected years of data &lt;b&gt;(\",range[1],\"-\",range[2],\")&lt;/b&gt; show mean values &lt;b&gt;&lt;u&gt;\", val_df$mean_sel[1],\"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;b&gt;&lt;u&gt;\",val_df$slope_sel[1], \"&lt;/b&gt;&lt;/u&gt; trend in slope.\")\n  #       \n  #       text_li&lt;-list()\n  #       for (i in 2:length(val_df$subnm)) {\n  #         subtext&lt;-paste0(\"The &lt;u&gt;&lt;b&gt;\",val_df$subnm[i], \"&lt;/u&gt;&lt;/b&gt; sub index historical mean is &lt;u&gt;&lt;b&gt;\",round(val_df$mean[i],2),\" &lt;/u&gt;&lt;/b&gt;±&lt;u&gt;&lt;b&gt;\",round(val_df$sd[i],2),\"&lt;/u&gt;&lt;/b&gt; and trends from the last five years of data show mean values &lt;u&gt;&lt;b&gt;\",val_df$mean_word[i],\"&lt;/u&gt;&lt;/b&gt; 1 standard deviation from the historical mean and &lt;u&gt;&lt;b&gt;\",val_df$slope_word[i], \"&lt;/u&gt;&lt;/b&gt; trend in slope. The trends in the selected years of data show mean values &lt;b&gt;&lt;u&gt;\", val_df$mean_sel[i],\"&lt;/b&gt;&lt;/u&gt; 1 standard deviation from the historical mean and &lt;b&gt;&lt;u&gt;\",val_df$slope_sel[i], \"&lt;/b&gt;&lt;/u&gt; trend in slope.\") \n  #         text_li[[i]]&lt;-subtext\n  #       }\n  #       subs_text&lt;-do.call(\"paste\", text_li)\n  #       paste(text,subs_text)\n  #       \n  #     }\n  #     \n  #     \n  #   }\n  # })\n  # \n\n  # #####STUFF FOR INFO PAGE#####\n  # #Help fig\n  # output$plotimg&lt;-renderImage({\n  #   list(src=\"WWW/TS_info.png\",\n  #        contentType=\"image/png\",\n  #        align=\"center\")\n  # }, deleteFile = F)\n  # \n  # #Text\n  # output$introtext&lt;-renderText({\n  #   \n  #   introtext&lt;-\"This app is intended to provide a way to interact with indicators from the Barataria Basin Ecosystem Status Report (ESR). The Barataria Basin ESR is a report with over 100 indicators describing drivers, pressures, states, human activities, and human dimensions produced by NOAA's Integrated Ecosystem Assessment (IEA) program. This is a prototype app with a small selection of indicators in order to get feedback for a potential future product.\"\n  # })\n  # \n  # output$usehead&lt;-renderText({\n  #   \n  #   infotext&lt;-\"How to Use\"\n  # })\n  # \n  # output$infotext1&lt;-renderText({\n  #   \n  #   infotext1&lt;-\"&lt;b&gt;1.&lt;/b&gt; Begin by choosing the indicator from the dropdown menu on the left of the screen. &lt;br&gt;&lt;br&gt;\n  #     &lt;b&gt;2&lt;/b&gt;. The indicator time series plot will be updated on the right. Below is a figure on how to interpret the plot.\"\n  # })\n  # \n  # output$infotext2&lt;-renderText({\n  #   \n  #   infotext2&lt;-\"&lt;b&gt;3.&lt;/b&gt; Below the plot is a rangeslider. Pull on either end of the slider to customize the time range of the plot. The time frame you have chosen will appear in text below the slider, originally indicating the full time frame of the indicator. &lt;br&gt;&lt;br&gt;\n  #     &lt;b&gt;4.&lt;/b&gt; A table below the figure show the historical mean and standard deviation (presented as dashed and solid black horizontal lines) and the trends in mean and slope compared to those values of the last five years of data as presented in the ESR. This table will update with trends of mean and slope if a custom time frame is selected using the rangeslider. &lt;br&gt;&lt;br&gt;\n  #     &lt;b&gt;5.&lt;/b&gt; Below the table is a plain text summary of the table above, describing mean and SD values as well as trends in mean and slope for the last five years of data and slected time frames.\" \n  # })\n  # \n}\n\n\n\n# Run the application \napp&lt;-shinyApp(ui = ui, server = server)"
  }
]